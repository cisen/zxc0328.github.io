<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zindex's blog]]></title>
  <subtitle><![CDATA[zindex of muxistudio]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-10-22T07:38:08.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Zindex]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ES6探秘-Classes]]></title>
    <link href="http://yoursite.com/2015/10/22/learn-ES6-with-babel/"/>
    <id>http://yoursite.com/2015/10/22/learn-ES6-with-babel/</id>
    <published>2015-10-22T01:23:57.000Z</published>
    <updated>2015-10-22T07:38:08.000Z</updated>
    <content type="html"><![CDATA[<p>ES6中增加了一些新特性，但从底层的角度来说，只是一些语法糖。<br>但是就我个人来说，如果不了解这些语法糖的本质，是用不安心的。那我们要如何揭开这些语法糖的真实面目呢？<br>Babel to the rescue！ Babel是一款将ES6代码转换为ES5代码的编译器，从而让我们可以无视浏览器的支持，直接享受ES6的新特性。同时，我们也可以通过研究Babel编译出的ES5代码，来揭开ES6的面纱。</p>
<a id="more"></a>
<h3 id="ES6_Classes">ES6 Classes</h3><p>ES6中的Classes是在Javascript现有的原型继承的基础上引入的一种语法糖。Class语法并没有引入一种新的继承模式。它为对象创建和继承提供了更清晰，易用的语法。  </p>
<p>我们用class关键字来创建一个类，constructor关键字定义构造函数，用extends关键字来实现继承，super来实现调用父类方法。</p>
<p>好，下面是一个ES6 class语法的完整例子：  </p>
<pre class="prettyprint">
//定义父类View
class View {
  constructor(options) {
    this.model = options.model;
    this.template = options.template;
  }

  render() {
    return _.template(this.template, this.model.toObject());
  }
}
//实例化父类View
var view = new View({
  template: 'Hello, <%= name="" %="">'
});
//定义子类LogView，继承父类View
class LogView extends View {
  render() {
    var compiled = super.render();
    console.log(compiled);
  }
}
</%=></pre>  

<p>这段简短的代码就用到了上述的几个关键词。class语法的确的简洁明确，借鉴了主流OO语言的语法，更易于理解。  </p>
<p>然而我在用这段代码时，又有些犹豫。这还是我熟悉的js原型继承吗，这真的是同一种继承模式的一个语法糖吗？  </p>
<p>真相究竟是如何呢？我们就拿babel编译之后的代码作为切入口，来看看ES6 class语法的本质。</p>
<p>下面是上述ES6代码用babel编译之后的结果：</p>
<pre class="prettyprint" style="height:400px;overflow-y:scroll">
'use strict';
var _get = function get(_x, _x2, _x3) {
    var _again = true;
    _function: while (_again) {
        var object = _x,
            property = _x2,
            receiver = _x3;
        desc = parent = getter = undefined;
        _again = false;
        if (object === null) object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === undefined) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
                return undefined;
            } else {
                _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                continue _function;
            }
        } else if ('value' in desc) {
            return desc.value;
        } else {
            var getter = desc.get;
            if (getter === undefined) {
                return undefined;
            }
            return getter.call(receiver);
        }
    }
};

var _createClass = (function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
})();

function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}

var View = (function() {
    function View(options) {
        _classCallCheck(this, View);
            this.model = options.model;
        this.template = options.template;
    }
    _createClass(View, [{
        key: 'render',
        value: function render() {
            return _.template(this.template, this.model.toObject());
        }
    }]);
    return View;
})();

var LogView = (function(_View) {
    _inherits(LogView, _View);
    function LogView() {
        _classCallCheck(this, LogView);
        _get(Object.getPrototypeOf(LogView.prototype), 'constructor', this).apply(this, arguments);
    }
    _createClass(LogView, [{
        key: 'render',
        value: function render() {
            var compiled = _get(Object.getPrototypeOf(LogView.prototype), 'render', this).call(this);
            console.log(compiled);
        }
    }]);
    return LogView;  

})(View);
</pre>

<p>这段代码很长，我们只关注里面的函数，可以得到它的结构如下:</p>
<pre class="prettyprint" style="height:400px;overflow-y:scroll">
//用于得到原型链上属性的方法的函数
var _get = function get(_x, _x2, _x3) {
    //······
}

//用于创建对象的函数
var _createClass = (function() {
     //内部函数，定义对象的属性
    function defineProperties(target, props) {
        //······
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
})();

//用于实现继承的函数
function _inherits(subClass, superClass) {
        //······
        subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
});

var View = (function() {
    //······
    return View;
})();

var LogView = (function(_View) {
    //······
})(View);
</pre>

<p>我们从一个View类的创建开始分析</p>
<pre class="prettyprint">
class View {
  constructor(options) {
    this.model = options.model;
    this.template = options.template;
  }
  render() {
    return _.template(this.template, this.model.toObject());
  }
}

//ES5代码
var View = (function() {
    function View(options) {
        _classCallCheck(this, View);
            this.model = options.model;
        this.template = options.template;
    }
    _createClass(View, [{
        key: 'render',
        value: function render() {
            return _.template(this.template, this.model.toObject());
        }
    }]);
    return View;
})();

</pre>
我们从编译之后的代码中可以看出，View是一个IIFE，里面是一个同名的函数View，这个函数经过  `_createClass()`函数的处理之后，被返回了。所以我们得出的第一点结论就是，**ES6中的class实际就是函数**。当然这点在各种文档中已经明确了，所以让我们继续分析。 

IIFE中的同名的View实际上就是我们在ES5的原型继承中使用的构造函数，所以ES6中的class是对ES5中的构造函数的一种包装。我们发现，在class中设定的属性被放在ES5的构造函数中，而方法则以键值对的形式传入一个`_createClass()`函数中。那么这个`_createClass()`函数又制造了什么魔法呢？  

<pre class="prettyprint">
var _createClass = (function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
})();
</pre> 

<p><code>_createClass</code>也是一个IIFE，有一个内部的函数<code>defineProperties</code>，这个函数遍历属性的描述符，进行描述符的默认设置，最后使用<code>Object.defineProperty()</code>方法来写入对象的属性。IIFE的renturn部分有两个分支，一个是针对一个类的原型链方法，一个是静态方法，我们看到原型链方法被写入构造函数的原型对象里，<strong>而静态方法则被直接写入构造函数里，因此我们不用实例化对象就可以直接调用一个类的静态方法了</strong>。</p>
<blockquote>
<p>js中的函数是对象，Function构造函数的prototype指向Object.prototype，因此可以写入属性</p>
</blockquote>
<p>OK，到目前我们已经搞清了ES6的class关键字是如何工作的，那么ES6中的继承有是如何实现的呢？下面让我们看看<code>_inherits()</code>函数。</p>
<pre class="prettyprint">
function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
</pre>
]]></content>
    <summary type="html">
    <![CDATA[<p>ES6中增加了一些新特性，但从底层的角度来说，只是一些语法糖。<br>但是就我个人来说，如果不了解这些语法糖的本质，是用不安心的。那我们要如何揭开这些语法糖的真实面目呢？<br>Babel to the rescue！ Babel是一款将ES6代码转换为ES5代码的编译器，从而让我们可以无视浏览器的支持，直接享受ES6的新特性。同时，我们也可以通过研究Babel编译出的ES5代码，来揭开ES6的面纱。</p>]]>
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开发手记之Litejs自定义事件]]></title>
    <link href="http://yoursite.com/2015/10/08/litejs-dev-storys-event/"/>
    <id>http://yoursite.com/2015/10/08/litejs-dev-storys-event/</id>
    <published>2015-10-08T08:55:28.000Z</published>
    <updated>2015-10-08T08:56:46.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
      <category term="Litejs" scheme="http://yoursite.com/tags/Litejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向前端模块化的web端设计准则]]></title>
    <link href="http://yoursite.com/2015/09/27/web-desgin-issues-with-fe/"/>
    <id>http://yoursite.com/2015/09/27/web-desgin-issues-with-fe/</id>
    <published>2015-09-27T06:07:40.000Z</published>
    <updated>2015-09-27T09:25:42.000Z</updated>
    <content type="html"><![CDATA[<p>一个了解前端页面实现的设计师做出的设计可以让前端工程师事半功倍，而一个不了解前端实现基本知识的设计师的作品，在实际的操作中会让前端工程师叫苦不迭。所以我写这篇博客是想讲一下一些前端实现的流程和思想，其中有很大一部分是建立在一个前提之下的，那就是设计师的设计稿考虑到了一些模块化，可复用的思想，并且是按这些标准来进行设计的。</p>
 <a id="more"></a>
<h3 id="1-_前端页面实现的流程">1. 前端页面实现的流程</h3><p>一般来说，一个web端产品有好几个页面组成，前端工程师会首先分析页面的结构和模块，这属于页面的架构部分。而在页面的样式部分，则需要提取出页面的主要设计元素（色值，字号，margin，padding等等）。<br>你可能会问，为什么要提取呢，直接做页面，到时候去看一下色值和字号是什么不就行了？<br>问的好，按那样做的确是可以，然而现在的产品比较复杂，css虽然不是一种编程语言，但是less，sass等技术给css添加了一些编程语言才有的特性，比如变量，嵌套，mixin等等。这样我们在使用sass之类的异构语言写css时，就可以将css分门别类，每个模块写一个专门的sass文件，将页面上可以复用的css代码段提取出来，在各个模块之中调用，达到提高效率的目的。<br>我这么说可能还是不够具体，拿学而来说，整个产品中有这样几种色值：<br><img src="http://7oxh2b.com1.z0.glb.clouddn.com/Screen%20Shot%202015-09-27%20at%202.54.58%20PM.png" alt="学而色值"><br><em>p.s.这里只列出了最主要的颜色。</em></p>
<p>用sass代码写就是这样  </p>
<p><pre class="prettyprint"><br>$mainColorGreen:#92CF67;<br>$mainColorGray:F7F8FA;<br>$fontColorDark:#666;<br>$fontColorLight:#999;<br></pre><br>这样我们就告别了符号化的16进制颜色代码，从而可以用语义化的变量来调用颜色值，每当我们要使用颜色值的时候，只要这样调用就可以了：  </p>
<p><pre class="prettyprint"><br>.main{<br>    background-color:$mainColorGray;<br>}<br>.title{<br>    color:$fontColorDark;<br>}<br></pre><br>从而将颜色值统一管理，大大加强了可复用性。</p>
<p>对于其他的数值类型的样式比如字号，边距，也是同样的做法，前端工程师在写样式时会首先提取这些通用的元素。<br>因此如果设计师懂得前端的流程，并按相应的准则来设计，那么前端工程师就可以提取到大量的信息。事实上，如果有标注这个流程，那么设计师在标注时便可以总结出自己设计稿中的一些可以复用的元素，相比之下，设计师更了解自己的作品，因此在总结时会更加的轻松自如。标注这一部分将在2.4节中介绍。<br>反之，如果设计师不按约定的准则来设计，那么前端工程师便很难提取出相同的元素（因为设计的时候压根就没考虑这个！），造成前端的样式混乱，开发效率大大下降。</p>
<h3 id="2-_一些面向前端模块化的设计准则">2. 一些面向前端模块化的设计准则</h3><h4 id="2-1_样式复用">2.1 样式复用</h4><p>这些元素包括，颜色值，字体的字号，边距等    </p>
<p><strong>颜色值</strong>  </p>
<p>之前在第一节中便举了颜色复用的例子，这里再拿学而作为例子，比如学而中的课程信息页：<br><img src="http://7oxh2b.com1.z0.glb.clouddn.com/Screen%20Shot%202015-09-27%20at%203.28.16%20PM.png" alt="课程信息页"><br> 搜索框和评论框的边框色是一样的，这就方便了前端工程师的代码复用。而从视觉上来说，搜索框和评论框作为两个组件，在UI上的风格是相近的。<br> 所以基本的原则就是控制整个项目中使用的颜色的数量，在相似的组件上复用色值或者其他的数值，在使用一种新的颜色之前，请想一想，是否可以用现有的颜色而不是引入一种新的颜色。</p>
<p><strong>字号</strong>  </p>
<p>字号的原则也是在页面中不要引入过多的不同字号。因为我们在前端中使用相对字号，所以一般我们定一种基础的字号，作为主要的正文的字号。而标题等元素的字号大小则定为基础字号的倍数，一般是一位小数倍，比如1.2、1.5、1.8等。比如在学而中存在32px,24px,17px,16px,14px,12px这些字号，我们将12px定为base字号，那么24px便是12px的两倍，用2rem表示，16px则是1.33rem，不是有理数，因此在设计中应该加以避免（在视觉效果满足要求的前提下，16px可以改为15px，这样就是1.25rem）（或者在最初设计之时就加以规划）。<br>然而这些字号还是太散乱了，在一个组件（模块）中使用三级字体是比较合理的选择，而组件之间的字号值可以重合，从而使整个产品的字号系统大大简化。</p>
<p><strong>边距</strong>  </p>
<p>在一个组件中，可能存在很多不同的边距值，这次问题的关键不是不同边距值的数量，而是边距之间的倍数关系。如果边距之间是整数倍的，那么在sass中便可以使用运算符来进行边距的计算，比如:  </p>
<p><pre class="prettyprint"><br>$marginBase:10px;<br>$paddingBase:20px;<br>.box{<br>    margin:$marginBase $marginBase*2;<br>    padding-top:$paddingBase/2;<br>}<br></pre><br>这就要求我们在设计时对边距进行一些计算，从而在保证视觉效果的前提之下，使边距达到一个倍数的关系。 </p>
<p>一个反面例子：    </p>
<p><img src="http://7oxh2b.com1.z0.glb.clouddn.com/Screen%20Shot%202015-09-27%20at%204.06.04%20PM_spec.png" alt="学而首页热门课程组件">  </p>
<p>这是学而首页的热门课程组件，其中纵向的边距每一个的不同，而且之间没有任何倍数关系，这就给边距的计算带来了麻烦。  </p>
<h4 id="2-2_页面模块化">2.2 页面模块化</h4><p>之前在第一节中讲过，在开发中，前端工程师会对页面进行模块的划分，然后分别开发。因此设计师在设计时，就要注意这种模块化、组件化的思路。  </p>
<p>这是学而首页的模块划分：  </p>
<p><img src="http://7oxh2b.com1.z0.glb.clouddn.com/xueer.png" alt="学而首页">  </p>
<p>为什么要进行模块划分呢？首先，拿学而来说，首页有的导航和页脚两个模块在其他页面中都会用到，所以我们将它们分出来来达到一个复用的效果。对于其他模块，实际上我们在其他页面中并不会复用，但我们还是要用一种模块化的思维来看。   </p>
<p>什么是模块化的思维呢？其实就将一个模块设计成一个相对独立的个体，它继承了整个产品的基础设计风格，简而言之就是一些通用的样式，比如色值，字体，字号，边距。但它是相对独立的，可以独立的完成一个功能，与其他的模块并没有耦合的关系。也就是说，这个模块是可以拔插的，加入这个模块，便获得了相应的功能，而移除这个模块，整个页面在功能上不会受太大的影响，当然视觉效果上会受影响。所以设计师要考虑的就是如何设计相互独立的模块并且布局（比如两个模块在页面上有部分重叠，就是一个不太好的实践）。 </p>
<p>学而的首页便是一个高度模块化的页面，我们将一些功能模块，如猜你喜欢移除，换成其他的模块，整个页面在视觉上和功能上都不会受影响，只是没有了猜你喜欢这个特定的模块罢了。  </p>
<p>模块化的页面设计，对于后续的产品升级和维护，也是很有利的。</p>
<h4 id="2-3_UI组件系统化">2.3 UI组件系统化</h4><p>UI组件和上一小节中所说的模块有什么不同呢?<br>相比于带有逻辑、能完成独立功能的模块，UI组件不带有逻辑，是用于完成UI交互功能的某个小组件。所以UI组件相比与模块来说细粒度要更小一些。各个模块可以重复使用站点的UI组件，来达到一种视觉风格的统一。</p>
<p><img src="http://7oxh2b.com1.z0.glb.clouddn.com/Screen%20Shot%202015-09-27%20at%205.00.34%20PM.png" alt="UI"><br><em>学而的UI组件</em>   </p>
<p>关于UI组件，我相信就不用我班门弄斧了，设计师们在设计一个产品时所设计的UI组件自然是系统化的。  </p>
<p>一套系统的UI组件，可以在代码中用独立的文件进行引用，因此这是加强页面组件化的一大利器。对此我的建议就是在做页面的同时维护一张UI组件清单，这样可以直观的组织已有的UI组件，同时在开发时，也可以交给前端进行UI组件的快速整理和开发。  </p>
<h4 id="2-4_关于标注">2.4 关于标注</h4><p>关于标注，做的好可以给前端工程师带来巨大的效率提升，但如果不懂得前端开发的一些常识，标注也可以变得毫无用处。</p>
<p>关于页面色值，字号，边距的标注比较复杂，可以单独写一篇博文来讲，这里就不详述了。 </p>
<p>而另一个意义重大的标注便是UI组件的清单，比如：<br><img src="http://7oxh2b.com1.z0.glb.clouddn.com/index_uikit.png" alt="UI">  </p>
<p>这个清单对于设计师整理自己的UI组件和前端工程师快速开发都是很有利的。</p>
<h3 id="3-_结语">3. 结语</h3><p>如果设计师能了解了这些前端开发的常识，并且把这些准则在设计中运用起来，那么我相信前端工程师和设计师之前的合作可以更加的流畅。前端工程师是设计稿的最终实践者，所以如果工程师和设计师之间能去除了一些认知障碍，达成共识，开发效率一定可以得到很大程度的提升。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个了解前端页面实现的设计师做出的设计可以让前端工程师事半功倍，而一个不了解前端实现基本知识的设计师的作品，在实际的操作中会让前端工程师叫苦不迭。所以我写这篇博客是想讲一下一些前端实现的流程和思想，其中有很大一部分是建立在一个前提之下的，那就是设计师的设计稿考虑到了一些模块化，可复用的思想，并且是按这些标准来进行设计的。</p>]]>
    
    </summary>
    
      <category term="Design" scheme="http://yoursite.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular源码分析:$q]]></title>
    <link href="http://yoursite.com/2015/08/24/angulr-q-js/"/>
    <id>http://yoursite.com/2015/08/24/angulr-q-js/</id>
    <published>2015-08-24T07:27:51.000Z</published>
    <updated>2015-08-28T09:51:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="概述">概述</h3><p>Augular中的$q服务提供了Promise的实现，这个服务叫做“q”是因为它是<a href="https://github.com/kriskowal/q" target="_blank" rel="external">Kris Kowal’s Q</a>的一种植入。  </p>
<p>从Augular中$q服务的文档中可以了解到，这个服务有两种用法，一种在某种程度上和ES6的Promise规范相似，而另一种则和Q以及jQuery的Deferred接口类似。</p>
<a id="more"></a>
<p>因此在Angular中$q的具体代码实现有两种，一种是将$q作为一个构造函数，并且接收一个<code>resolver()</code>函数作为唯一参数。这和ES6的原生实现相似：</p>
<pre class="prettyprint">
// for the purpose of this example let's assume that variables `$q` and `okToGreet`
// are available in the current lexical scope (they could have been injected or passed in).

function asyncGreet(name) {
  // perform some asynchronous operation, resolve or reject the promise when appropriate.
  return $q(function(resolve, reject) {
    setTimeout(function() {
      if (okToGreet(name)) {
        resolve('Hello, ' + name + '!');
      } else {
        reject('Greeting ' + name + ' is not allowed.');
      }
    }, 1000);
  });
}

var promise = asyncGreet('Robin Hood');
promise.then(function(greeting) {
  alert('Success: ' + greeting);
}, function(reason) {
  alert('Failed: ' + reason);
});
</pre>

<p>而另一种实现则是更为传统的CommonJS风格的实现，将Promise描述成一个接口，来和一个代表了未来结果的异步请求发生交互。</p>
<p>代码如下：  </p>
<pre class="prettyprint">
// for the purpose of this example let's assume that variables `$q` and `okToGreet`
// are available in the current lexical scope (they could have been injected or passed in).

function asyncGreet(name) {
  var deferred = $q.defer();

  setTimeout(function() {
    deferred.notify('About to greet ' + name + '.');

    if (okToGreet(name)) {
      deferred.resolve('Hello, ' + name + '!');
    } else {
      deferred.reject('Greeting ' + name + ' is not allowed.');
    }
  }, 1000);

  return deferred.promise;
}

var promise = asyncGreet('Robin Hood');
promise.then(function(greeting) {
  alert('Success: ' + greeting);
}, function(reason) {
  alert('Failed: ' + reason);
}, function(update) {
  alert('Got notification: ' + update);
});

</pre>


<h2 id="源码分析：deferred_API">源码分析：deferred API</h2><p>因为$q服务中的ES6形式实现实际上是在deferred api的基础上的一种封装实现，所以我们先来看看deferred API的源代码。<br>这部分代码的结构看起来是这样的：</p>
<pre class="prettyprint">
//deferred method: return a instance of Deferred object
var deferred = function() {
    return new Deferred();
};

//construct function of Promise object
function Promise() {
    this.$$state = { status: 0 };
}

//then, catch, and finally method of Promise object
extend(Promise.prototype, {
    then: function(onFulfilled, onRejected, progressBack) {
      //...
    },

    "catch": function(callback) {
      //...
    },

    "finally": function(callback, progressBack) {
      //...
    }
});


//construct function of Deferred object, the promise object is a method 
//of Deferred object. And resolve, reject, notify apis are binded here.
function Deferred() {
    this.promise = new Promise();
    //Necessary to support unbound execution :/
    this.resolve = simpleBind(this, this.resolve);
    this.reject = simpleBind(this, this.reject);
    this.notify = simpleBind(this, this.notify);
}



extend(Deferred.prototype, {
    resolve: function(val) {
        //...
    },

    $$resolve: function(val) {
        //...
    },

    reject: function(reason) {
        //...
    },

    $$reject: function(reason) {
        //...
    },

    notify: function(progress) {
           //...
    }
  });

</pre>


<h3 id="具体分析：Deferred-promise-then()">具体分析：Deferred.promise.then()</h3><pre class="prettyprint">
then: function(onFulfilled, onRejected, progressBack) {
       //check if at least one para was passed in, otherwise return.
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
        return this;
      }
      //instantiate a new Deferred object as result
      var result = new Deferred();

       //instantiate $$state.pending
      this.$$state.pending = this.$$state.pending || [];
      //push paras of this into $$state.pending array
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      //if $$state.status changed, add this.$$state to the process 
      queue
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      //return the new Deferred object instance's promise object
      return result.promise;
}
</pre>

<p>then()方法接收三个参数，promise条件满足时执行的函数<code>onFulfilled</code>，被拒绝时的回调函数<code>onRejected</code>，以及一个通知用回调函数<code>progressBack</code>。<br>这里的逻辑是<code>then()</code>方法接收参数之后，实例化一个新<code>Deferred</code>对象，并将参数推入pending数组中。<br>关于then,有趣的一点在于then的链式调用的实现，在分析这点之前，我们把目光移到这个api的大局上来，看看promise的状态变化以及状态转移是如何实现的。</p>
<h3 id="具体分析：Deferred-resolve()">具体分析：Deferred.resolve()</h3><p>在promise对象内部，收到请求后具体执行状态转移的便是<code>resolve()</code>和<code>reject()</code>函数了，我们还可以向其中传递一个唯一的参数，来作为<code>resolve()</code>的value或是<code>reject()</code>的reason。因为这两个方法原理大致类似（在源码中这两个方法的相关代码有较大的不同，应该和这个两种行为不同的结果有关），所以我们就以<code>resolve()</code>方法为例来说明。</p>
<pre class="prettyprint">
resolve: function(val) {
        //if $$state not equals 0, which means the state had already 
        changed, return.
      if (this.promise.$$state.status) return;
      //reject if val is this.promise its self.
      if (val === this.promise) {
        this.$$reject($qMinErr(
          'qcycle',
          "Expected promise to be resolved with value other than itself '{0}'",
          val));
      } else {
      //resolve val with inner method $$resolve
        this.$$resolve(val);
      }

    },

$$resolve: function(val) {
      var then, fns;
      //warp the functions in order to be called only once
      fns = callOnce(this, this.$$resolve, this.$$reject);
      try {
        if ((isObject(val) || isFunction(val))) then = val && val.then;
        if (isFunction(then)) {
          this.promise.$$state.status = -1;
          then.call(val, fns[0], fns[1], this.notify);
        } else {
          this.promise.$$state.value = val;
          this.promise.$$state.status = 1;
          scheduleProcessQueue(this.promise.$$state);
        }
      } catch (e) {
        fns[1](e);
        exceptionHandler(e);
      }
}
</pre>

<p><code>resolve()</code>方法接收一个值val，这个值可能是对象/函数，也有可能是普通的数值或是字符串。<code>resolve()</code>方法首先判断<code>Deferred.promise.$$state.status</code>的值是否不为0，如果不为0则说明状态已经转移了，那么就不再继续执行。如果一切正常，在执行<code>resolve()</code>方法时，<code>Deferred.promise.$$state.status</code>的值为初始的0，然后val被传入一个内部函数<code>$$resolve()</code>,来进行真正的处理。<code>$$resolve()</code>函数首先调用<code>callOnce()</code>函数来确保自己只被调用一次，然后判断val的数据类型，如果是对象或者是函数，则将val赋值给then，其中<code>then = val &amp;&amp; val.then;</code>这个语句用来将<code>resolve()</code>中可能传入的promise对象的<code>then()</code>方法赋值给then。下一步，如果then是函数，也就是说传入的val是一个promise对象的话，则将<code>Deferred.promise.$$state.status</code>的值设为-1，之后<code>then.call(val, fns[0], fns[1], this.notify);</code>这是将fns[0], fns[1], this.notify三个函数作为参数传入了这个promise对象的then方法中，其中前两者便是经过了<code>callOnce()</code>函数处理的<code>this.$$resolve</code>和<code>this.$$reject</code>函数，这一步设置了被传入的promise对象的pending list。<br>如果val不是函数，那么接下去的逻辑便很容易理解了，<code>this.promise.$$state.value</code>被赋值为val的值，<code>this.promise.$$state.status</code>的值被设置为1，1这个状态码便代表了promise对象目前处于<strong>fulfilled</strong>状态。<br>接下去调用<code>scheduleProcessQueue()</code>函数，并传入<code>this.promise.$$state</code>对象。这个函数实际是调用了<code>ProcessQueue()</code>函数，不过加入了一些angular内部的检查机制，来保证函数调用和angular内部运行的同步。而<code>ProcessQueue()</code>函数则真正执行<code>then()</code>方法推入到pending list中的回调函数。  </p>
<p>下面我们简单的来看看ProcessQueue函数:</p>
<pre class="prettyprint">
function processQueue(state) {
    var fn, deferred, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    for (var i = 0, ii = pending.length; i < ii; ++i) {
      deferred = pending[i][0];
      fn = pending[i][state.status];
      try {
        if (isFunction(fn)) {
          deferred.resolve(fn(state.value));
        } else if (state.status === 1) {
          deferred.resolve(state.value);
        } else {
          deferred.reject(state.value);
        }
      } catch (e) {
        deferred.reject(e);
        exceptionHandler(e);
      }
    }
  }
</pre>

<p><code>processQueue()</code>函数简单地将当前promise对象的pending list按传入的状态码进行处理。<code>fn = pending[i][state.status];</code>中，status为1，那么就调用pending list的第二项，也就是onFulfilled情况下的回调函数。之后<br><code>deferred.resolve(fn(state.value));</code>中，实际上执行了一次<code>eval(fn(state.value))</code>,回调函数就是在这里被执行的，之后<code>deferred.resolve(val)</code>便将回调函数处理之后的值传给了新创建的deferred对象。</p>
<h3 id="实例分析：Deferred-promise-then()的链式调用机制">实例分析：Deferred.promise.then()的链式调用机制</h3><pre class="prettyprint">
          var Deferred = $q.defer();
          var promise1 = Deferred.promise;
          var promise2 = promise1.then(function (data) {
                 return data  + 1;
          });
          promise2.then(function (val) {
               console.log(val);
          }); 
          Deferred.resolve(10);
</pre>

<p>这段代码的预期结果是promise2的回调函数会输出11。让我们来看看这是怎样实现的。</p>
<p>首先，promise1的<code>then()</code>方法被执行,回调函数被推入pending list中，一个新的<code>deferred</code>对象被创建,<code>deferred.promise</code>对象被返回，我们将这个新创建的promise对象赋值给promise2。同样的，promise2的<code>then()</code>方法也被执行。所以我们把promise1的pending list称谓list1，promise2的pending list称为list2。</p>
<p>之后，<code>Deferred.resolve(10);</code>被执行，在这里这是同步的，但一般来说这是异步执行的。此时执行resolve()方法，后数据被传入内部的<code>$$resolve()</code>方法，因为val是数值，因此<code>$$state</code>对象的value被设置为10，而状态码也被设置为相应的1，代表解析成功。  </p>
<p>之后的任务交给了<code>processQueue()</code>函数，因为list1中的第二个参数是我们通过<code>then()</code>方法传入的回调函数，这个函数执行<code>deferred.resolve(fn(state.value));</code>，回调函数执行，并返回值11，这里的deferred对象便是promise1的<code>then()</code>方法创建的新deferred对象，也就是list1中的deferred对象，是promise2的宿主对象。  </p>
<p>所以<code>deferred.resolve(fn(state.value));</code>的执行，执行了又一次<code>resolve()</code>函数，只是这次的上下文换成了promise2所在的上下文，那么接下去的流程便和promise1发生的一致了。最后list2中的回调执行，输出值11。</p>
<p>让我们总结一下，<code>then()</code>方法实际上是负责在运行时挂载回调函数列表，而<code>resolve()</code>函数则负责异步触发函数执行。链式调用是通过返回新promise对象，并配合<code>then()</code>方法的同步加载回调以便获取新上下文来实现的。</p>
<p>tbc···</p>
<hr>
<blockquote>
<p><a href="http://olim7t.github.io/2013/08/19/angular-promise-implementation.html" target="_blank" rel="external">参考-A look at Angular’s promise implementation</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="概述">概述</h3><p>Augular中的$q服务提供了Promise的实现，这个服务叫做“q”是因为它是<a href="https://github.com/kriskowal/q">Kris Kowal’s Q</a>的一种植入。  </p>
<p>从Augular中$q服务的文档中可以了解到，这个服务有两种用法，一种在某种程度上和ES6的Promise规范相似，而另一种则和Q以及jQuery的Deferred接口类似。</p>]]>
    
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/tags/Angular/"/>
    
      <category term="Angular" scheme="http://yoursite.com/categories/Angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[实战之IE兼容常见问题]]></title>
    <link href="http://yoursite.com/2015/07/25/ie-fix/"/>
    <id>http://yoursite.com/2015/07/25/ie-fix/</id>
    <published>2015-07-25T03:40:10.000Z</published>
    <updated>2015-07-25T12:12:55.000Z</updated>
    <content type="html"><![CDATA[<p>最近因为在实习，所以做的东西要测试，做了IE8的兼容，对IE8的常见CSS兼容问题有了一点认识，在这里总结一下。</p>
<h3 id="Html5标签问题">Html5标签问题</h3><p>IE8不支持Html5的语义化新标签，<code>&lt;header&gt;,&lt;nav&gt;,&lt;footer&gt;</code>之类。对此Google出了一个html5shiv.js，来实现这些标签。</p>
<p> 这个html5shiv.js的原理就是使用document.createElement()这个dom方法来动态创建一个html元素对象。html5shiv.js中处理了IE在这个方法上的一些问题（某些元素动态加入的属性不管用），还提供了api，以及基础的CSS，使得元素在默认的display属性为block。</p>
<a id="more"></a>
<h3 id="RGBA支持问题">RGBA支持问题</h3><p>IE8不支持rgba这种颜色的表示方式，但我们如果在背景色使用rgba的话，还是有替代方案的：</p>
<pre><code>//IE8下
filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#19fff
 fff,endColorstr=#19ffffff);
</code></pre><p>这句代码其实是用来实现渐变的，不过我们把startColor和endColor设成一样的便可以用来设置纯色背景了。</p>
<p>startColor的后六位便是正常的十六进制颜色代码，而前两位是alpha通道，对应关系如下：</p>
<table>
<thead>
<tr>
<th>透明度</th>
<th>代码</th>
</tr>
</thead>
<tbody>
<tr>
<td>0.1</td>
<td>19</td>
<td></td>
</tr>
<tr>
<td>0.2</td>
<td>33</td>
<td></td>
</tr>
<tr>
<td>0.3</td>
<td>4C</td>
<td></td>
</tr>
<tr>
<td>0.4</td>
<td>66</td>
<td></td>
</tr>
<tr>
<td>0.5</td>
<td>7F</td>
<td></td>
</tr>
<tr>
<td>0.6</td>
<td>99</td>
<td></td>
</tr>
<tr>
<td>0.7</td>
<td>B2</td>
<td></td>
</tr>
<tr>
<td>0.8</td>
<td>C8</td>
<td></td>
</tr>
<tr>
<td>0.9</td>
<td>E5</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="CSS3支持">CSS3支持</h3><p>这部分是硬伤，media query有成熟的方案支持，但是像border-radius这种虽也有办法可以实现，但是太过于麻烦。我们毕竟得move on，不能太过拘泥，有些时候平稳退化，优雅降级就可以了。</p>
<h3 id="To_Be_Contiued···">To Be Contiued···</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>最近因为在实习，所以做的东西要测试，做了IE8的兼容，对IE8的常见CSS兼容问题有了一点认识，在这里总结一下。</p>
<h3 id="Html5标签问题">Html5标签问题</h3><p>IE8不支持Html5的语义化新标签，<code>&lt;header&gt;,&lt;nav&gt;,&lt;footer&gt;</code>之类。对此Google出了一个html5shiv.js，来实现这些标签。</p>
<p> 这个html5shiv.js的原理就是使用document.createElement()这个dom方法来动态创建一个html元素对象。html5shiv.js中处理了IE在这个方法上的一些问题（某些元素动态加入的属性不管用），还提供了api，以及基础的CSS，使得元素在默认的display属性为block。</p>]]>
    
    </summary>
    
      <category term="兼容 实战" scheme="http://yoursite.com/tags/%E5%85%BC%E5%AE%B9-%E5%AE%9E%E6%88%98/"/>
    
      <category term="兼容 实战" scheme="http://yoursite.com/categories/%E5%85%BC%E5%AE%B9-%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最佳实践之多个高度不定水平实体垂直居中]]></title>
    <link href="http://yoursite.com/2015/07/23/vertical-align-middle/"/>
    <id>http://yoursite.com/2015/07/23/vertical-align-middle/</id>
    <published>2015-07-23T14:35:05.000Z</published>
    <updated>2015-07-25T10:09:25.000Z</updated>
    <content type="html"><![CDATA[<p>如何快速并且健壮地实现高度不一定的实体的居中呢？  </p>
<p>vertical-align显然是一种办法。这个元素从语义上来看就是用来实现垂直对齐的。要理解vertical-align，首先我们得了解几个概念，inline boxes, line box, 以及baseline。  </p>
<p>inline boxes是行内元素构成的行内box，而line box则是由一行内所有的inline boxes构成的box，比如：</p>
<pre><code>&lt;div&gt;
    &lt;span&gt;我是inline box&lt;/span&gt;
    我是匿名inline box
&lt;/div&gt;
</code></pre><p>除了display为inline或者inline-block的标签会形成inline box，行内文本也会形成匿名的inline box。</p>
<p>一行所有的inline boxes构成匿名的line box，其中inline box中高度最高的那个的高度便是line box的高度，由此撑起了整行的高度。（这涉及到line-height方面的知识）</p>
<p>而关于baseline，则是文字在排版时顶部与底部中间的基线，如果是行内文本，具体位置随字体不同而不同，一般都在中线以下的位置。具体的需要参考西文字体学（Typography）(Jobs在大学旁听的课程之一，你值得拥有)  </p>
<p>而line—height其实就是两条基线之间的距离。</p>
<p><img src="http://7oxh2b.com1.z0.glb.clouddn.com/blog_7_24_1.png" alt="baseline"></p>
<a id="more"></a>
<p>对于inline-block级元素来说，基线的定义是这样的：</p>
<pre><code>The baseline of an &#39;inline-block&#39; is the baseline of its last line
box in the normal flow, unless it has either no in-flow line boxes
or if its &#39;overflow&#39; property has a computed value other than
&#39;visible&#39;, in which case the baseline is the bottom margin edge.
（CSS2.1 W3C）
</code></pre><p> 一般是正常文档流中的最后一个line box的基线。</p>
<p>我们面对的场景是这样的，一个高度固定的div，中间有数个高度不固定的div需要被垂直居中。让我们来看看vertical-align:middle的定义：</p>
<pre><code>Align the vertical midpoint of the box with the baseline of the
parent box plus half the x-height of the parent.（CSS2.1 W3C）
</code></pre><p> （元素）的垂直中点与父元素的基线加上x轴高度的一半对齐。</p>
<p> 听起来有点奇怪，什么是x-height呢，x-height其实就是上图中小写字母x占据的高度，西文字体中小写字母x占据了mean line和baseline直接的这段空间，也就是所谓的字面所在。</p>
<p> x这个字母恰好是镜面对称的，所以我们可以清楚的看到，vertical-align:middle就是将元素的中点对准x字母的中线，所以就形成了垂直居中的效果。</p>
<p> 好，现在我们来看实际的情况，我们有一个高度固定的div，然后内部有两个inline-block级的div，需要水平居中，这两个div的高度随机。</p>
<p> 代码：</p>
<pre><code>&lt;div style=&quot;height:300px;&quot;&gt;
    &lt;div style=&quot;display:inline-block&quot;&gt;我是一号div，啊啊啊啊啊啊啊啊啊啊&lt;br&gt;啊啊啊啊啊啊啊啊&lt;/div&gt;
    &lt;div style=&quot;display:inline-block&quot;&gt;我是二号div&lt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="height:100px;background-color:blue"><div style="display:inline-block;background-color:red">我是一号div，啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊</div><div style="display:inline-block;background-color:white">我是二号div</div></div>

<p>这是默认情况，两个div的vertical-align被设置为baseline,可以看出两个div的baseline在一条线上。第一个div的baseline是最后一个line box的baseline。</p>
<p>那么父级元素div，一个块级元素，是否存在baseline呢？答案是否定的，在inline-block元素处于块极元素内部的情况下，vertical-align更多与同级inline-block元素的相互对齐有关，而和父级元素无关。</p>
<p>可以实验一下，我们把父级div设为inline-block，看看会发生什么事情。</p>
<pre><code>&lt;div style=&quot;display:inline-block;line-height:100px;background-
color:blue&quot;&gt;
    &lt;div style=&quot;display:inline-block;background-color:red&quot;&gt;
    我是一号div，啊啊啊啊啊啊啊啊啊啊&lt;br&gt;啊啊啊啊啊啊啊啊
    &lt;/div&gt;
    &lt;div style=&quot;display:inline-block;background-color:white&quot;&gt;
    我是二号div
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="display:inline-block;line-height:100px;background-color:blue;font-size:150px"><div style="display:inline-block;background-color:red;font-size:15px">我是一号div，啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊</div><div style="display:inline-block;background-color:white;font-size:15px">我是二号div</div>X</div>

<p>这里我将父级div设为inline-block并且把line-height设为100px，因此其子元素的基线就和父元素的基线对齐了。我特意放了一个特大号的字，X的底部便是baseline了。</p>
<p>了解到这一点之后，我们便清楚了，父元素是块级元素的情况下，vertical-align只和同级元素有关。vertical-align:middle便是同级元素的中线相互对齐。</p>
<p>我们只需要一个空的div，它只起占位的作用，高度是100%，宽度是0，于是，其他高度小于父元素的子元素便会与这个占位元素的中线对齐，也就达到了垂直对齐。</p>
<pre><code>&lt;div style=&quot;height:100px;background-color:blue;font-size:0&quot;&gt;
    &lt;div style=&quot;height:100%;width:0;display:inline-block;vertical-
    align:middle&quot;&gt;&lt;/div&gt;
    &lt;div style=&quot;display:inline-block;background-color:red;font-size:
    15px;vertical-align:middle&quot;&gt;我是一号div，啊啊啊啊啊啊啊啊啊啊&lt;br&gt;啊啊
    啊啊啊啊啊啊&lt;/div&gt;
    &lt;div style=&quot;display:inline-block;background-color:white;font-
    size:15px;vertical-align:middle&quot;&gt;我是二号div&lt;/div&gt;
   &lt;/div&gt;
</code></pre><div style="height:100px;background-color:blue;font-size:0"><div style="height:100%;width:0;display:inline-block;vertical-align:middle"></div><div style="display:inline-block;background-color:red;font-size:15px;vertical-align:middle">我是一号div，啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊</div><div style="display:inline-block;background-color:white;font-size:15px;vertical-align:middle">我是二号div</div></div>

<p>垂直居中的效果就达成了！</p>
<p>ok，用:before伪元素来实现也是一个很不错的做法，相比空div要更简洁一些。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如何快速并且健壮地实现高度不一定的实体的居中呢？  </p>
<p>vertical-align显然是一种办法。这个元素从语义上来看就是用来实现垂直对齐的。要理解vertical-align，首先我们得了解几个概念，inline boxes, line box, 以及baseline。  </p>
<p>inline boxes是行内元素构成的行内box，而line box则是由一行内所有的inline boxes构成的box，比如：</p>
<pre><code>&lt;div&gt;
    &lt;span&gt;我是inline box&lt;/span&gt;
    我是匿名inline box
&lt;/div&gt;
</code></pre><p>除了display为inline或者inline-block的标签会形成inline box，行内文本也会形成匿名的inline box。</p>
<p>一行所有的inline boxes构成匿名的line box，其中inline box中高度最高的那个的高度便是line box的高度，由此撑起了整行的高度。（这涉及到line-height方面的知识）</p>
<p>而关于baseline，则是文字在排版时顶部与底部中间的基线，如果是行内文本，具体位置随字体不同而不同，一般都在中线以下的位置。具体的需要参考西文字体学（Typography）(Jobs在大学旁听的课程之一，你值得拥有)  </p>
<p>而line—height其实就是两条基线之间的距离。</p>
<p><img src="http://7oxh2b.com1.z0.glb.clouddn.com/blog_7_24_1.png" alt="baseline"></p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web Animation Using Javascript part one]]></title>
    <link href="http://yoursite.com/2015/05/23/Web-Animation-Using-Javascript-part-one/"/>
    <id>http://yoursite.com/2015/05/23/Web-Animation-Using-Javascript-part-one/</id>
    <published>2015-05-23T14:47:00.000Z</published>
    <updated>2015-06-12T11:52:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="第二章：Velocity-js动画">第二章：Velocity.js动画</h2><p>在这一章，你将学到由Velocity.js提供的特性，指令，和选项。如果你熟悉基于jQuery的动画，那么你已经知道如何使用Velocity.js了；它的功能几乎和jQuery的$.animate()函数一模一样。</p>
<p>不过抛开你现有的知识，本章中对特性的井井有条的分类将会向你介绍动画引擎行为的细微差别。掌握这些细微差别将会帮助你从新手成为专业人士。即使你已经对jQuery动画和Velocity.js相当熟悉了，也给自己一个机会，快速浏览本章。<strong>你必定会发现一些你没意识到的可行之事。</strong><br><a id="more"></a></p>
<h3 id="JavaScript动画库类型">JavaScript动画库类型</h3><p>JavaScript动画库有很多类型。有些在浏览器中重现物理接触效果。有些使WebGL和Canvas动画更容易维护。有些专注于SVG动画。有些改善了UI动画————最后这种类型正是本书的重点。</p>
<p>两种广受欢迎的UI动画库是GSAP和Velocity。你将在本书中使用Velocity，因为它在MIT许可下是免费的，外加它拥有极其强大的功能以供编写整洁且富有表现力的动画代码。Velocity被很多知名站点使用，包括Tumblr，Gap，还有Scribd。</p>
<p>噢，而且它是由本书的作者创造的！</p>
<h3 id="安装jQuery和Velocity">安装jQuery和Velocity</h3><p>你可以从jQuery.com下载jQuery，从VelosityJS.org下载Velosity。在你的页面上使用它们——和任何JavaScript库一样——简单地把指向相应库文件的<code>&lt;script&gt; &lt;/script&gt;</code>标签放在你页面的<code>&lt;/body&gt;</code>标签之前。如果你想链接预部署版本的库文件（而不是你电脑上的本地拷贝），你的代码看起来可能是这样：</p>
<pre><code>&lt;html&gt;
      &lt;head&gt;My Page&lt;/head&gt;
   &lt;body&gt;
         My content.
         &lt;script src=”//code.jquery.com/jquery-2.1.1.min.js”&gt;
       &lt;/script&gt;
       &lt;script src=”//cdn.jsdelivr.net/velocity/1.1.0/
       velocity.min.js”&gt;
       &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>当一起使用jQuery和Velocity时，在Velocity前引入jQuery。<br>这就对了！现在你已经准备好了。</p>
<h2 id="使用Velocity:基础">使用Velocity:基础</h2><p>为了熟悉Velocity，我们将从基本的组件开始：参数，属性，值，和链式调用。因为jQuery几乎无所不在，看看Velocity和jQuery的关系也是有必要的。</p>
<h3 id="Velocity和jQuery">Velocity和jQuery</h3><p>Velocity可以独立于jQuery运行，但是二者可以一起使用。一般我们推荐这么做来获得jQuery的链式调用能力：当你已经使用jQuery预选择了一个元素，你可以调用.velocity()来拓展它从而施加动画效果：</p>
<pre><code>// 把jQuery元素对象赋值给一个变量
var $div = $(“div”);
// 使用Velocity对元素施加动画
$div.velocity({ opacity: 0 });
这种语法和jQuery自带的animate函数一模一样：
$div.animate({ opacity: 0 });
</code></pre><p>本书所有的例子都使用Velocity和jQuery的结合，因此可以使用这种语法。</p>
<h3 id="参数">参数</h3><p>Velocity接收多个参数。第一个参数是一个映射CSS属性到其最终值的对象。属性及其接收值的类型直接与CSS中使用的相对应（如果你不熟悉基础的CSS属性，在读这段代码之前读一本HTML和CSS的介绍性书籍）：</p>
<pre><code> // 对元素施加动画使width变为“500px”，opacity变为1。
 $element.velocity({ width: “500px”, opacity: 1 });
</code></pre><p> —<br> <em>Tip</em>  </p>
<h2 id="在JavaScript中，如果你将要提供一个包含字母（而不是只有整数）的属性值，把属性值放在引号中。"> 在JavaScript中，如果你将要提供一个包含字母（而不是只有整数）的属性值，把属性值放在引号中。</h2><p>你可以传递一个指定了动画选项的对象作为第二个参数。</p>
<pre><code>$element.velocity({ width: “500px”, opacity: 1 }, { duration: 400, 
easing: “swing” });
</code></pre><p>这里也有一个简写的参数语法：你可以使用逗号分隔语法，而不是传递一个包含选项的对象作为第二个参数。这要求以任何逗号分隔的顺序列出动画时长的值（接收一个整数），缓动模式（一个字符串），以及回调函数（一个函数）。（你一会将会学到这些选项的作用。）</p>
<pre><code>  //时长1000ms的动画 (使用默认缓动模式swing)
  $element.velocity({ top: 50 }, 1000);
  //时长1000ms的动画，并且使用缓动模式“ease-in-out”
  $element.velocity({ top: 50 }, 1000, “ease-in-out”);
 //使用缓动模式“ease-out”，使用默认时长值400ms)
 $element.velocity({ top: 50 }, “ease-out”);
 //时长1000ms的动画,并且在动画完成时触发一个回调函数        
 $element.velocity({ top: 50 }, 1000, function() 
 { alert(“Complete.”) });
</code></pre><p>当你只需要指定基本选项(时长，缓动模式，回调函数)的时候，这个简写语法是一种传递动画选项的快捷方法。如果你在这三个选项之外传递一个动画选项，你必须把所有选项调回对象语法。<br>因此，如果你想要指定一个延时选项，改变以下的语法：</p>
<pre><code>$element.velocity({ top: 50 }, 1000, “ease-in-out”);
</code></pre><p>到这种语法：</p>
<pre><code>//重新指定上面使用的动画选项，但包括一个值为500ms的延时选项  
$element.velocity({ top: 50 }, { duration: 1000, easing: “ease-in-
out”, delay: 500 });
</code></pre><p>你不能这么做：</p>
<pre><code>//错误：把动画选项分为逗号分隔语法和对象语法来写
$element.velocity({ top: 50 }, 1000, { easing: “ease-in-out”, 
delay: 500 });
</code></pre><h3 id="属性">属性</h3><p>基于CSS的属性动画和基于JavaScript的属性动画有两处区别。</p>
<p>首先，不像在CSS中那样，Velocity中每个CSS属性只接收单个数值。所以，你可以传入：</p>
<pre><code>$element.velocity({ padding: 10 });
</code></pre><p>或者：</p>
<pre><code>$element.velocity({ paddingLeft: 10, paddingRight: 10 });
</code></pre><p>但是你不能传入:</p>
<pre><code>// 错误：CSS属性被传入了多个数值
$element.velocity({ padding: “10 10 10 10” });
</code></pre><p>如果你想要把四个padding值(top, right, bottom, 和 left)加入动画，将它们列为分离的属性。</p>
<pre><code>// 正确
$element.velocity({
  paddingTop: 10,
  paddingRight: 10,
  paddingBottom: 10,
  paddingLeft: 10
});
</code></pre><p>其他可以接收多个数值的常见CSS属性包括<code>magrin</code>，<code>transform</code>， <code>text-shadow</code>，和<code>box-shadow</code>。</p>
<p>为了形成动画而将组合属性分离到它们的子属性中给了你对缓动值的进一步控制。举个例子，在CSS中，当对父padding属性下的多个子属性施加动画时，你只可以指定一种属性范围的缓动类型。在JavaScript中，你可以为每个子属性指定独立的缓动值——这个特性的优势会在之后这章关于CSS transform属性的讨论中变得明确。</p>
<p>列出我们的独立子属性也可以使你的动画代码更易阅读和维护。</p>
<p>基于CSS的属性动画和基于JavaScript的属性动画的第二处不同是JavaScript属性没有词与词之间的横杠，第一个词之后的所有词必须大写。例如，padding-left变成了paddingLeft，而background-color变成了backgroundColor。还有一点，JavaScript属性名不应该被置于引号中：</p>
<pre><code>// 正确
$element.velocity({ paddingLeft: 10 });
// 错误: 使用了横杠且没有大写
$element.velocity({ padding-left: 10 });
// 错误：在JavaScript格式的属性名两边使用了引号
$element.velocity({ “paddingLeft”: 10 });
</code></pre><h3 id="值">值</h3><p>Velocity支持<code>px</code>,<code>em</code>,<code>rem</code>,<code>%</code>,<code>deg</code>,<code>vw</code>和<code>vh</code>单位。如果你没有为数值提供某个类型的单位，一个基于CSS属性类型的合适的单位会被自动添加。对于大多数属性，px是默认单位，不过一个接收旋转角度的属性，比如rotateZ,会被自动添加deg单位：</p>
<pre><code>$element.velocity({
  top: 50, // 默认设置为px单位类型
  left: “50%”, // 我们手动指定了%单位类型      
  rotateZ: 25 // 默认设置为deg单位类型
});
</code></pre><p>为你所有的属性值显式声明单位类型，通过使px单位和它的替代选择之间的对比更加明显来增加代码在快速浏览时的清晰程度。</p>
<p>另一个Velocity相对于CSS的优势是它支持可以被选择性添加在属性值之前的四种数值运算符：+，—，*，和/。它们和JavaScript中的数学运算符一一对应。你可以把这些数值运算符与一个等号组合来进行相应的数学运算。请参考实例中的行内代码注释：</p>
<pre><code>$element.velocity({
  top: “50px”, // 没有运算符。不出所料地向前运动50px。
  left: “-50”, // 负运算符。不出所料地向前运动-50px。
  width: “+=5rem”, // 将当前宽度值转换为对应的rem值并加上5个单位值。
  height: “-10rem”, // 将当前高度值转换为对应的rem值并减去10个单位值。
  paddingLeft: “*=2” // 把当前的paddingLeft值加倍。
  paddingRight: “/=2” // 把当前的paddingLeft值除以2。
 });
</code></pre><p>Velocity的简写特性，像数值运算符，把动画逻辑完全保留在动画引擎中。这不仅仅因排除了手动数值计算而使代码更加简洁，也通过告诉Velocity更多你计划如何对元素施加动画来提升了性能。Velocity处理的逻辑越多，它优化你的代码来达到更高的帧数的能力就越强。</p>
<h3 id="链式调用">链式调用</h3><p>当多个Velocity调用被连续链接在一个元素（或一系列元素）上的时候，它们会自动形成队列。这说明每个动画在前一个动画完成时开始：</p>
<pre><code>$element
  // 对width和height属性施加动画
  .velocity({ width: “100px”, height: “100px” })
  // 当宽度和高度的动画完成之后，对top属性施加动画
  .velocity({ top: “50px” });
</code></pre><h2 id="使用Velocity:选项">使用Velocity:选项</h2><p>为了完善对Velocity的介绍，让我们快速浏览最常用的选项:时长，缓动，起始回调及结束回调，循环，延时，和显示。</p>
<h3 id="时长">时长</h3><p>你可以指定时长选项，它决定了一个动画调用要多长时间结束，以毫秒（1/1000秒）为单位或是三种简写时长之一：“慢”（相当于600ms），“普通”（400ms），或者“快”（200ms）。当以毫秒指定一个时长值时，应提供一个不带任何单位类型的整数：</p>
<pre><code>// 施加时长1000ms（1秒）的动画
$element.velocity({ opacity: 1 }, { duration: 1000 });
</code></pre><p>或者：</p>
<pre><code>$element.velocity({ opacity: 1}, { duration: “slow” });
</code></pre><p>当你回顾你的代码时，使用命了名的简写时长的好处是它们表达了一个动画的节奏（是慢还是快？）。如果你全部使用这些简写，它们自然也将带给你的站点更统一的动画设计，因为所有的动画将会落在三个速度分类中而不是被传递一个随意的值。</p>
<h3 id="缓动">缓动</h3><p>缓动是定义一个动画的整个过程中不同部分发生快慢的数学函数。举个例子,“ease-in-out”缓动类型表明动画应该在第一部分缓缓加速（淡入）然后在最后部分缓缓减速（淡出）。相比之下，“ease-in”缓动类型产生的动画在第一部分加速到一个目标速度但随后保持一个恒定速度直到动画完成。“ease-out”缓动类型是“ease-in”的相反情况，动画开始并且保持一个恒定速度直到在动画的最后部分缓缓减速。</p>
<p>与第一章，“JavaScript动画的优势”中讨论的基于物理的运动很相似，缓动给你力量来向你的动画注入人格。拿一个使用线性缓动的动画会让人感到多么的机械来说。（线性缓动产生一种以相同速率开始，运行，和结束的动画。）这种机械的感受是与现实世界的线性机械运动相联系的结果：自我导航的机械物体往往以直线移动并且以恒定速度操作，因为没有任何美学的抑或生理的原因去让它们不那么做。</p>
<p>与此相对，有生命的东西-不管是人体或是正被风吹的树-在真实世界中从不以一个恒定的速度移动。摩擦力和其他外部力量令它们以不同的速度移动。</p>
<p>伟大的动画设计师对有机的运动怀有敬意，因为这让人感觉界面正流畅地回应用户的互动。在移动应用中，举个例子，你希望一个菜单在你将它滑出屏幕时马上加速离开你的手指。如果菜单只是以一个恒定速度从你的手指移开-像一个机械手臂-你将会感到滑动只是触发了一连串不受你控制的运动事件。</p>
<p>关于缓动类型的力量，你将会在第三章：“动画设计理论”中学到更多。对于现在，让我们快速浏览Velocity的所有可用的缓动类型：</p>
<p>+jQuery UI的三角函数缓动。关于这些缓动方程的完整列表，以及它们的加速效果简介的互动演示，请查阅easing.net上的demo。</p>
<pre><code>$element.velocity({ width: “100px” }, “easeInOutSine”);
</code></pre><p>+CSS缓动：”ease-in”, “ease-out”, “ease-in-out”, 和 “ease” (一个与”ease-in-out”有细微不同的版本)。</p>
<pre><code>$element.velocity({ width: “100px” }, “ease-in-out”);
</code></pre><p>+CSS贝塞尔曲线：贝塞尔曲线缓动允许对一个缓动加速曲线结构的完全控制。一条贝塞尔曲线通过指定一张图表上四个等距点的高度来定义，Velocity接收的图表格式是有四项二进制值的数组。访问cubic-bezier.com来查看一个创建贝塞尔曲线的互动指南。</p>
<pre><code>$element.velocity({ width: “100px” }, [ 0.17, 0.67, 0.83, 
0.67 ]);
</code></pre><p>+弹簧模型：这种缓动类型模仿一个被拉伸然后突然释放的弹簧的弹性形变。正如定义弹簧运动的经典物理方程，这种缓动类型允许你传递一个形式为[张力，摩擦力]的二项数组。一个更高的张力值（默认为500）增加了总速度及弹性。一个更低的摩擦力（默认为20）增加了振动结束时的速度。</p>
<pre><code>$element.velocity({ width: “100px” }, [ 250, 15 ]);
</code></pre><p>+“spring”缓动是一种预定义的弹簧模型的实现，它在你不想试验张力和摩擦力值的时候使用方便。</p>
<pre><code>$element.velocity({ width: “100px” }, “spring”);
</code></pre><p>记住你也可以传递缓动选项作为一个选项对象参数中的一个直接定义的属性。</p>
<pre><code>$element.velocity({ width: 50 }, { easing: “spring” });
</code></pre><p>不要被你可用的缓动选项的数量吓倒。你将经常依靠CSS缓动类型和“spring”缓动，它们适合绝大部分动画使用实例。最复杂的缓动类型，贝塞尔曲线，被脑中有一个高度具体的缓动方式且不怕麻烦的开发者使用最多。</p>
<p><em>注意</em></p>
<p>本节其余的Velocity选项必须被直接传递入一个选项对象。不像那些已经被描述的，这些附加选项不能以简写的逗号分隔语法在Velocity中使用。</p>
<h3 id="起始回调和结束回调">起始回调和结束回调</h3><p><code>begin</code>和<code>complete</code>选项允许你指定在动画中的特定节点被触发的函数：给<code>begin</code>选项传递一个在动画开始前被调用的函数。相反地，传给<code>complete</code>选项一个在动画完成时被调用的函数。</p>
<p>在这两种选项中，函数在每次动画调用时只被调用一次，就算多个元素同时被施加动画：</p>
<pre><code>var $divs = $(“div”);
$divs.velocity(
   { opacity: 0 },
   // 在动画开始前打开一个警告窗口
   {
   begin: function () { console.log(“Begin!”); },
    // 一旦动画完成就打开一个警告窗口
   complete: function () { console.log(“Complete!”); }
} );
</code></pre><p><em>回调函数</em></p>
<p>这些选项常被叫做“回调函数”（或“回调”）因为它们将在特定的事件发生时被“调用”。回调函数对触发依赖于元素可见度的事件十分有用。举个例子，如果一个元素在开始时不可见，然后发生动画使透明度变为1，那么随后触发一个UI事件，一旦用户能看见新内容时便更改内容，可能是合适的。</p>
<p>记住你不需要使用回调函数来依次排列动画；当多个动画被指派在单个元素或一组元素上时，动画会自动按顺序触发。回调函数用来使非动画逻辑形成队列。</p>
<h3 id="循环">循环</h3><p>把循环选项设成一个整数，指定了一个动画在被调用时的属性映射表中的值与调用前元素的这些值之间应交替的次数：</p>
<pre><code>$element.velocity({ height: “10em” }, { loop: 2 });
</code></pre><p>如果元素的初始高度是5em，它的高度会在5em和10em之间交替两次。</p>
<p>如果<code>begin</code>和<code>complete</code>选项在一个循环的调用中被使用，它们会被各触发一次-分别在最开始和整个循环队列的终点；它们不会在每次循环交替中被重复触发。</p>
<p>你也可以传递<code>true</code>来触发无限循环，而不是传递一个整数：</p>
<pre><code>$element.velocity({ height: “10em” }, { loop: true });
</code></pre><p>无限循环忽略了<code>complete</code>回调，因为它们不会自然结束。然而，它们可以通过Velocity的<code>stop</code>命令被手动结束：</p>
<pre><code>$element.velocity(“stop”);
</code></pre><p>非无限循环对动画队列是有用的，不然它们将需要重复链式动画的代码。举个例子，如果你想要让一个元素弹上弹下两次（也许是警告用户有一条新消息在等待他们），没有优化的代码看起来大概是这样：</p>
<pre><code>$element
  // 假定translateY开始时为“0px”
  .velocity({ translateY: “100px” })
  .velocity({ translateY: “0px” })
  .velocity({ translateY: “100px” })
  .velocity({ translateY: “0px” });
</code></pre><p>更紧凑且易维护的代码版本看起来大概是这样：</p>
<pre><code>// 重复（循环）这段动画两次
$element.velocity({ translateY: “100px” }, { loop: 2 });
</code></pre><p>有了这个优化的版本，如果你已经在心里想好了最大值应该被改变多少（当前是100px），你只需要在一部分代码中更改最大值。如果在你的代码中有很多这种重复的例子，那么循环对你的工作流多么有益，是显而易见的。</p>
<p>无限循环对加载指示器有巨大的帮助，加载指示器一般无限循环动画直到数据被加载完成。</p>
<p>首先，通过使加载指示器元素的透明度在可见和不可见之间无限循环，令其表现为有节奏的闪动：</p>
<pre><code>// 假定透明度开始时是1（完全可见）
$element.velocity({ opacity: 0 }, { loop: true });
</code></pre><p>然后，一旦数据结束加载，你可以停止动画，然后隐藏这个元素：</p>
<pre><code>$element
  // 首先停止无限循环
  .velocity(“stop”)
  // ... 所以你可以对元素施加一个新动画，
  // 你可以施加它来使元素变回不可见。
  .velocity({ opacity: 0 });
</code></pre><h3 id="延时">延时</h3><p>以毫秒指定延时选项,来在动画开始之前插入一个暂停。延时选项的目标是把动画的计时逻辑完整保留在Velocity中-与在一个Velocity动画开始时依赖使用jQuery的$.delay()函数来改变相反：</p>
<pre><code>//在进行动画使透明度变为0之前等待100ms
$element.velocity({ opacity: 0 }, { delay: 100 });
</code></pre><p>你可以把loop选项和delay选项一起设定来创建一个循环交替间的暂停：</p>
<pre><code>// 循环四次，在每次循环前等待100ms
$element.velocity({ height: “+=50px” }, { loop: 4, delay: 
100 });
</code></pre><h3 id="显示与可见度">显示与可见度</h3><p>Velocity的显示与可见度选项与它们的CSS同仁直接对应，并且接收同样的值，包括：“none”，“inline”，“inline-block”，“block”，“flex”，等等。另外，Velocity允许“auto”值，这指定<code>display</code>属性为元素的默认值。（作为参考，a和span标签默认为“inline”，而div和大部分其他元素默认为“block“）。Velocity的可见度选项，像它的CSS同仁一样，接收”hidden“，”visible“，和”collapse“值。</p>
<p>在Velocity中，当<code>display</code>选项被设为”none“(或可见度被设为”hidden“)，一旦动画完成，元素的CSS属性即被相应地设置。这有效地使元素在动画完成时被隐藏，并且在与将元素的透明度变为0的动画联合使用时很有用（这里的意图是将一个元素淡出至页面外）：</p>
<pre><code>// 使一个元素的透明度渐变为0，然后把它移出页面文档流
$element.velocity({ opacity: 0 }, { display: “none” });
</code></pre><p><em>注意</em></p>
<p>上面的代码有效地替换了jQuery中的等效代码：</p>
<pre><code>$element
        .animate({ opacity:0 })
        .hide();
</code></pre><p><em>快速回顾：可见度与显示</em></p>
<p>以供参考，CSS<code>display</code>属性指定了一个元素如何影响它周围的元素以及被它包含的元素的定位。对比之下，CSS<code>visibility</code>属性仅仅影响一个元素是否能被看见。如果一个元素被设为”visibility:hidden”,它将继续在页面中占据空间，但是这个空间将简单地表现为一个空间隔-这个元素的每一部分都是不可见的。作为替代，如果一个元素被设为“display:none”，这个元素将完全从页面文档流中被移除，并且所有在其中或环绕它的元素将填补被移除元素的空间，好像这个元素从未存在过。</p>
<p>注意，你可以设置元素的visibility为”hidden“来简单地把元素同时标记为不可见和无法交互，而不是把这个元素移出页面文档流。当你想隐藏一个继续在页面上占位的元素时这很有用：</p>
<pre><code>// 将一个元素淡入到opacity:0，然后让它变得无法交互
$element.velocity({ opacity: 0 }, { visibility: “hidden” });
</code></pre><p>现在，让我们考虑相反方向的动画（显示元素而不是隐藏元素）：当<code>diaplay</code>或<code>visibility</code>被设为”none“或”hidden“之外的值，这个值会在动画开始前被设置，因此元素在即将到来的动画过程中是可见的。换句话说，你正在取消之前元素被移出视图时发生的隐藏过程。</p>
<p>以下，<code>display</code>在元素开始淡入之前被设为”block“：</p>
<pre><code>$element.velocity({ opacity: 1 }, { display: “block” });
</code></pre><p>这有效地替换了等效的jQuery代码：</p>
<pre><code>$element
  .show()
  .animate({ opacity: 0 });
</code></pre><p><em>提示</em></p>
<p>查看Velocity动画选项的完整概述，请查阅Velocity.org的文档。</p>
<p><em>包含动画逻辑</em></p>
<p>加上Velocity的<code>delay</code>选项，Velocity对CSS<code>display</code>和<code>visibility</code>设定的包含允许动画逻辑被完全保留在Velocity中。在生产环境代码中，每当一个元素被淡入或淡出视图时，几乎总伴随着<code>display</code>和<code>visibility</code>上的改变。借助像这样的Velocity简写帮助你保持你的代码干净且易于维护，因为这样对外部jQuery函数的依赖更少，并且避免了重复使用通常会使动画逻辑臃肿的辅助函数。</p>
<p>注意Velocity包括了以上演示的切换透明度动画的简写方式。它们的功能和jQuery的<code>fadeIn</code>及<code>fadeOut</code>函数一模一样。你仅需传递相应地传递命令给Velocity作为第一个参数，并且，如果想要的话，你可以传入一个选项对象，像往常一样。</p>
<pre><code>$element.velocity(“fadeIn”, { duration: 1000 });
$element.velocity(“fadeOut”, { duration: 1000 });
</code></pre><h2 id="使用Velocity：附加特性">使用Velocity：附加特性</h2><p>附加的Velocity.js特性中值得注意的包括：回退命令，滚动，颜色，和变形（平移，旋转，和缩放）。</p>
<h3 id="回退命令">回退命令</h3><p>传递“reverse”作为Velocity的第一个参数，来使元素发生动画返回至上一个Velocity调用前的值。<code>reverse</code>命令和一个标准的Velocity命令表现一样；它可以带有参数并且会和其他链式Velocity调用一起被加入队列。</p>
<p>回退默认设置了元素的上一个Velocity的调用中使用的选项（时长，缓动，等等）。然而，你可以传递一个新选项对象来覆写这些选项：</p>
<pre><code>// 使用上一个Velocity调用的选项来施加动画返回初始值
$element.velocity(“reverse”);
</code></pre><p>或</p>
<pre><code>// 做和上面一样的事，不过把上一个Velocity调用的时长值替换为2000ms
$element.velocity(“reverse”, { duration: 2000 });
</code></pre><p><em>注意</em></p>
<p>前一个调用的<code>begin</code>和<code>complete</code>选项被<code>reverse</code>命令忽视了；<code>reverse</code>从不重复调用回调函数。</p>
<h3 id="滚动">滚动</h3><p>传递“scroll”作为Velocity的第一个参数来滚动浏览器至一个元素的顶部。<code>scroll</code>命令和一个标准的Velocity调用表现一模一样；它可以带有参数并且会和其他链式Velocity调用一起被加入队列：</p>
<pre><code>$element
  .velocity(“scroll”, { duration: 1000, easing: “spring” })
  .velocity({ opacity: 1 });
</code></pre><p>这使用1000ms的时长和“spring”缓动将浏览器滚动到元素的顶部。然后，一旦元素被滚动进入视窗，它会完全淡入。</p>
<p>为了向一个父元素有滚动条的元素滚动，你可以使用<code>container</code>选项，它接收一个jQuery对象或者一个原始的元素。注意CSS<code>position</code>属性必须被设为<code>relative</code>,<code>absolute</code>,或者<code>fixed</code>中的一个-<code>static</code>不会起作用。</p>
<pre><code>// 滚动元素进入$(“#container”)元素的视图中
$element.velocity(“scroll”, { container: $(“#container”) });
</code></pre><p>在两种情况中-不管滚动是相对于浏览器窗口还是相对于一个父元素-滚动命令总是被调用在<em>正被滚动进入视窗</em>的元素上。</p>
<p>默认情况下，滚动发生在y轴。传入<code>axis：x</code>选项来水平滚动来取代垂直滚动：</p>
<pre><code>// 滚动浏览器到目标div的左边缘
$element.velocity(“scroll”, { axis: “x” });
</code></pre><p>最后，滚动命令还独特地接收一个以px设定的<code>offset</code>选项，它偏移了目标滚动位置：</p>
<pre><code>// 滚动到距离元素上边缘上方50px的位置
$element.velocity(“scroll”, { duration: 1000, offset: “-50px” });
// 滚动到距离元素上边缘下方250px的位置
$element.velocity(“scroll”, { duration: 1000, offset: “250px” });
</code></pre><h3 id="颜色">颜色</h3><p>Velocity支持这些CSS属性：<code>color</code>,<code>backgroundColor</code>, <code>borderColor</code>,和<code>outlineColor</code>的颜色动画。在Velocity中，颜色属性只接收16进制，举个例子，#000000（黑色）或#e2e2e2（浅灰）。为了达到颗粒度更小的颜色控制，你可以对颜色属性的单个红，绿，和蓝分量进行动画，也包括alpha通道分量。红，绿和蓝的数值范围在0到255之间，alpha通道（等同于透明度）的范围在0到1之间。</p>
<p>参考以下例子中的行内注释：</p>
<pre><code>$element.velocity({
  // 施加动画使背景颜色变到以十六进制表示的黑色
  backgroundColor: “#000000”,
  // 同步地施加动画使背景的alpha分量（透明度）变到50%
  backgroundColorAlpha: 0.5,
  // 也对元素的文本颜色的red分量施加动画使其变为总量的一半
  colorRed: 125
});
</code></pre><h3 id="变形">变形</h3><p>CSS变形属性对在2D和3D空间的元素施加平移，缩放，和旋转操作。它包括很多子组件，其中Velocity支持以下几种：</p>
<p>+<code>translateX</code>:沿x轴移动一个元素<br>+<code>translateY</code>:沿y轴移动一个元素<br>+<code>rotateZ</code>:沿z轴旋转一个元素（在2D表面上实际为顺时针或逆时针）<br>+<code>rotateX</code>:沿x轴旋转一个元素（在3D空间里实际为移向用户或远离用户）<br>+<code>rotateY</code>:沿y轴旋转一个元素（在3D空间里实际为向左移动或向右移动）<br>+<code>scaleX</code>:增加一个元素的宽度值<br>+<code>scaleY</code>:增加一个元素的高度值</p>
<p>在Velocity中，你可以在一个属性对象中以单独属性来施加这些组件带来的动画效果：</p>
<pre><code>$element.velocity({
  translateZ: “200px”,
  rotateZ: “45deg”
});
</code></pre><h2 id="使用Velocity：不使用jQuery（中级）">使用Velocity：不使用jQuery（中级）</h2><p>如果你是一个宁愿不借助jQuery的帮助来使用JavaScript工作的中级开发者，你将会高兴地得知Velocity也可以在jQuery不出现在页面上的时候工作。相应地，目标元素被直接传递入动画调用作为第一个参数，而不是把一个动画调用链接到一个jQuery元素对象上-就像本章之前的示例：</p>
<pre><code>Velocity(element, { opacity: 0.5 }, 1000); // Velocity
</code></pre><p>就算Velocity脱离jQuery被使用，它也保持和jQuery的$.animate()一样的语法；区别在于所有的参数都被向右移动来腾出位置以便在首位传入目标元素。另外，全局Velocity对象而不是具体的jQuery元素对象被用于调用动画。</p>
<p>当你脱离jQuery使用Velocity时，你不再对jQuery对象施加动画，而是原生文档对象模型（DOM）元素。原生DOM元素可以通过以下函数获取：</p>
<p>+<code>document.getElementByID()</code>：用ID属性获取一个元素<br>+<code>document.getElementsByTagName()</code>获取带有特定标签名的所有元素<br>+<code>document.getElementsByClassName()</code>获取带有特定CSS类的所有元素<br>+<code>document.querySelectorAll()</code>这个函数和jQuery的选择引擎的作用一模一样</p>
<p>让我们进一步探索<code>document.querySelectorAll()</code>，因为它可能将成为你在不借助jQuery帮助时选择元素的利器。（这是一个性能强大的且被众浏览器广泛支持的函数。）使用jQuery的元素选择器语法，你可以简单地传递给<code>querySelectorAll</code>一个CSS选择器（和你在样式表中用来选择目标元素的选择器一样），并且它将以一个数组的形式返回所有符合的元素：</p>
<pre><code>document.querySelectorAll(“body”); // 获取body元素
document.querySelectorAll(“.squares”); // 获取所有带“square”类的元素     
document.querySelectorAll(“div”); // 获取所有div
document.querySelectorAll(“#main”); //  获取所有id为“main”的元素 
document.querySelectorAll(“#main div”); // 获取所有id为“main”的元素中的
div
</code></pre><p>如果你把这些查找之一的结果赋值给一个变量，随后你可以重复使用这个变量来对目标元素施加动画：</p>
<pre><code>// 获取所有元素
var divs = document.querySelectorAll(“div”);
// 对所有div施加动画
Velocity(divs, { opacity: 0 }, 1000);
</code></pre><p>因为你不再拓展jQuery元素对象，你可能在想如何把元素一个个链接起来，像这样：</p>
<pre><code>// 它们彼此链接
$element
   .velocity({ opacity: 0.5 }, 1000)
   .velocity({ opacity: 1 }, 1000);
</code></pre><p>为了不借助jQuery来再现这个模式，简单地把一个函数接着另一个函数调用：</p>
<pre><code>// 对同样地元素施加的动画彼此自动链接起来
Velocity(element, { opacity: 0 }, 1000);
Velocity(element, { opacity: 1 }, 1000);
</code></pre><h3 id="结语">结语</h3><p>现在你已经有了对使用JavaScript进行web动画的好处的认识，加上对Velocity基础的一些掌握，你已经准备好去探索专业动画设计之下的迷人理论基础。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第二章：Velocity-js动画">第二章：Velocity.js动画</h2><p>在这一章，你将学到由Velocity.js提供的特性，指令，和选项。如果你熟悉基于jQuery的动画，那么你已经知道如何使用Velocity.js了；它的功能几乎和jQuery的$.animate()函数一模一样。</p>
<p>不过抛开你现有的知识，本章中对特性的井井有条的分类将会向你介绍动画引擎行为的细微差别。掌握这些细微差别将会帮助你从新手成为专业人士。即使你已经对jQuery动画和Velocity.js相当熟悉了，也给自己一个机会，快速浏览本章。<strong>你必定会发现一些你没意识到的可行之事。</strong><br>]]>
    
    </summary>
    
      <category term="翻译,Javascript" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91-Javascript/"/>
    
      <category term="翻译,Javascript" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91-Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[居中一切(centering all the directions)by KYLE SIMPSON]]></title>
    <link href="http://yoursite.com/2015/05/21/centering-all-the-directions/"/>
    <id>http://yoursite.com/2015/05/21/centering-all-the-directions/</id>
    <published>2015-05-21T14:53:26.000Z</published>
    <updated>2015-05-23T14:45:52.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://muxistudio.qiniudn.com/ccs_center_660_380px.jpg" alt="css centering"></p>
<p>自从文明的曙光降临以来，人类一直在斗争,对抗一切不可能之事，来达到人类进化的下一个阶段；去在这个伟大的星球上，以及环绕我们的宇宙中圈出自己的地盘；勇敢的进军任何地点…噢，原谅我这么夸张。</p>
<a id="more"></a>
<p><img src="http://muxistudio.qiniudn.com/e594bf4bef370534e5b4470b8fd2c4d5.png" alt="twitter"></p>
<p>我想说，“如果你曾与用css居中内容(尤其是垂直居中)苦战，请举手。”其实说“如果你从没有挣扎过…请举手。”可能更快些。CSS是一种强大到让人震惊的工具，但是还是有一些事情，比如垂直居中，甚至在今天仍处于“太TM难了”的状态。我将研究居中的多种方法，不过我认为我们仍将需要更好的东西。</p>
<h3 id="&lt;center&gt;">&lt;center&gt;</h3><p>首先，如果你还在使用<code>&lt;center&gt;</code>标签来居中，那么1999年喊你回家吃饭。正经地说，你把你的“现代web开发者”会员卡交出来吧。直到你改掉你如此丑陋的代码为止。</p>
<p><em>译者注：谷歌首页的logo就使用了<code>&lt;center&gt;</code>标签😰</em></p>
<h3 id="text-align:center">text-align:center</h3><p>每当说到居中文本的时候，你显然无法放弃<code>text-align:center</code>。它的功能正如它的字面意义。它将父容器中的行内文本水平居中。</p>
<p>例：</p>
<pre><code>&lt;style&gt;
#ex1_container { text-align:center; width:200px; background-      
color:yellow; }
&lt;/style&gt;
&lt;div id=&quot;ex1_container&quot;&gt;Hello World&lt;/div&gt;
</code></pre><div id="ex1_container1" style="text-align: center; width: 200px; background-color: yellow;">Hello World</div>

<p>这很容易。这里的技巧在于构造一个我们希望其子元素居中的父元素。我们不直接对内容添加样式，而是它的父容器。</p>
<p>除此之外，这个方法只对行内元素起作用（而且大概只该被使用在文本上，不过这点不被严格限制）。而且它只作用于水平方向。</p>
<h3 id="vertical-align:middle">vertical-align:middle</h3><p> “不过，不过···”你说，“不过<code>vertical-align:middle</code>如何？”对，听起来不错。可是结果，没那么理想。</p>
<p> 不像text-align：center，设置在一个父元素上来形容水平如何居中<em>它的内容</em>，<code>vertical-align:middle</code>作用在内容本身，并且不在它的父元素处描述它的位置，只是描述相对于周围别的行内元素的位置。</p>
<p> 对，只对让行内文本和行内图像整齐地排排坐有用，但这不是我们想要的神一样的垂直居中。</p>
<p><strong>注</strong>：你可以用<code>display:table</code>这个玩意在父元素上，把<code>display:table-cell</code>用在内容元素上。坏处：这就回到表格时代了，而且在低版本IE上兼容性很差。</p>
<h3 id="line-height">line-height</h3><p>一个有用的垂直居中文本的技巧是设置它容器的<code>line-height</code>属性为你想要的高度，然后文本会（大概的）自动垂直居中。这是一个常用的技巧。有时<code>line-height</code>会有一些副作用，并且它并不是十分完美的（由于字体单位不同，等等）。不过，当你所有的全部只是一根火柴棒，每样事物看起来都像是可以生火的木柴，对吧？</p>
<p>So，我们该怎么居中块级元素呢?</p>
<h3 id="margin:auto">margin:auto</h3><p>好吧，理论上说，我们大概会使用<code>margin: .. auto</code>，此次“..”表示我们的垂直margin。（我们一会后再说垂直居中的问题）</p>
<p>那么这是怎么工作的（水平居中）？例子如下：</p>
<pre><code>&lt;style&gt;
#ex2_container { width:200px; background-color:yellow; }
#ex2_content { margin:0px auto; background-color:gray; color:white;       
display:table; }
&lt;/style&gt;

&lt;div id=&quot;ex2_container&quot;&gt;&lt;div id=&quot;ex2_content&quot;&gt;Hello World&lt;/div&gt;
&lt;/div&gt;
</code></pre><div id="ex2_container" style="width: 200px; background-color: yellow;"><div id="ex2_content" style="margin: 0px auto; background-color: gray; color: white; display: table;">Hello World</div></div>

<p><strong>注：</strong>因为在这个例子中我没有确切定义<code>#ex2_content</code>元素的宽度（我只想让它和文本需要的那么大），为了让它收缩在文字周围但依然可以被居中，我使用<code>display:table</code>。你大概以为<code>display:inline-block</code>会有用，但是它不起作用。不过如果你手动设定<code>#ex2_content</code>的<code>width</code>或者<code>max-width</code>，你就完全不需要设定<code>display:table</code>了。</p>
<p>很酷吧?这里，我们只是直接告诉内容我们需要相对父元素居中它本身，当然，是水平的。这相比<br><code>text-align:center</code>来说不够语义化，因为你差不多正在描述内容周围的空间而不是控制内容本身。但我们在这点上会放它一马，因为这还不赖。</p>
<p>所以，你会说“那这肯定适用于垂直居中喽!?”当然不是，你是有多傻多天真才希望会有这样一个对称而简单的方案!?正经地说，你是在火星学的CSS吗!？</p>
<p>不幸的是，出于某些凡人无法理解的原因，这个“小把戏”不适用于垂直居中。</p>
<h3 id="hacks，hacks">hacks，hacks</h3><p><a href="http://blog.themeforest.net/tutorials/vertical-centering-with-css/" target="_blank" rel="external">这里</a>有大量的hacks，比如像负边距那样的奇异的东西，还有<a href="http://css-tricks.com/centering-in-the-unknown/" target="_blank" rel="external">幽灵元素</a><code>::before</code>等等其他的什么鬼。他们中的大多数都很脆弱，除非你的内容是固定宽度。</p>
<p>如果没有其他解决方案了，这将是我们在被压迫时会变成一种充满创造力的物种的证明——我们想办法制造它。</p>
<h3 id="translate(-50%,-50%)">translate(-50%,-50%)</h3><p>对Chris Coyier在<a href="http://css-tricks.com/" target="_blank" rel="external">CSS-TRICKS.com</a>上发表的一个技巧：<a href="http://css-tricks.com/centering-percentage-widthheight-elements/" target="_blank" rel="external">使用position和translate</a>脱帽致敬。</p>
<p>如果你在一些子元素上设定<code>position:absolute</code>，然后在那个子元素上设定<code>left:50%; top:50%</code>，它的左上角会被自动垂直居中和水平居中。呃，我们大概都知道这个。不过这完全没有帮助，除非我们的内容是1x1像素大。</p>
<p>这个技巧的后续，是<code>translate(-50%,-50%)</code>。不同于大多数这类百分比计算，像<code>left</code>和<code>top</code>，是相对于父容器来说，<code>translate(-50%,-50%)</code>中的百分比是相对于这个元素本身。</p>
<p>所以，我们把容器的左上角定位到中心，并且将它按宽度和长度的一半“转换”回来，然后duang!!，奇迹般得在两个方向都居中了。</p>
<p>例：</p>
<pre><code>&lt;style&gt;
#ex3_container { 
    width:200px;
    height:200px;
    background-color:yellow;
    position:relative; }
 #ex3_content { 
    left:50%; 
    top:50%; 
    transform:translate(-50%,-50%); 
    -webkit-transform:translate(-50%,-50%);
    background-color:gray;
    color:white; position:absolute; }
 &lt;/style&gt;

&lt;div id=&quot;ex3_container&quot;&gt;
    &lt;div id=&quot;ex3_content&quot;&gt;Hello World&lt;/div&gt;
&lt;/div&gt;
</code></pre><style>
  #ex3_container { width:200px; height:200px; background-color:yellow; position:relative; }
  #ex3_content { left:50%; top:50%; transform:translate(-50%,-50%); -webkit-transform:translate(-50%,-50%); background-color:gray; color:white; position:absolute; }
</style>

<div id="ex3_container"><div id="ex3_content">Hello World</div></div>


<p>这个技巧的鲁棒性明显比其他hack更强，因为它优雅地响应了各种情况，像不定宽内容，<code>min-width</code>,<code>max-height</code>,<code>overflow:scroll</code>,etc。它基本上做到了你希望它做的。无论它收缩或者扩展（除非你加了限制），都保持居中。棒棒哒！</p>
<p>去<a href="http://jsbin.com/etupoz/1/" target="_blank" rel="external">把玩</a>一下看看它能做什么。</p>
<p>不过，让我们诚实一些，这个方案不太语义化，而且在语法上比较丑陋（特别是因为那些奇怪的前缀）。并且落到了用力过度的那一类里。</p>
<p>这大概是目前最好的技巧了，考虑到了所有情况。但是让我伤心的是我们依旧需要写这样的文章，玩弄CSS来达到我们需要的效果。</p>
<h3 id="这是我们能做到的最好吗">这是我们能做到的最好吗</h3><p>如果这些“技巧”和“hacks”在你听起来像“垃圾科学”，这很正常。为什么这个该死的问题这么难？为什么我们需要根据不同的场景使用不同的技术？</p>
<p>一种统治一切的居中规则听起来如何？难道不该有一种标准的“东西”被加入CSS去处理一切问题，取代我们现在所处的处处hack的情形？</p>
<p>（阴谋论：制定CSS标准的同志们需要继续给博主们猛料，所以他们故意留了一些没有解决的问题）</p>
<p>这里有一个我刚想出来得平常的提议：</p>
<pre><code>&lt;style&gt;
#ex4_container { content-positioning:50% 50%; width:200px; 
height:200px; background-color:yellow; }
#ex4_content { content-positioning-anchor:50% 50%; 
background-color:gray; color:white; }
&lt;/style&gt;
</code></pre><p>我建议应该有一个<code>content-positioning</code>属性在父元素上来控制其子元素的位置。还有一个<code>content-positioning-anchor</code>属性控制子元素上起始点的位置。它会，当然，默认设为<code>0px 0px</code>，但是如果你把它设定为<code>50% 50%</code>，你会说，仅此而已，“把我的内容的中心放在容器的中心”。</p>
<p>duang！我刚刚解决了全世界的难题。好吧，这不是真的。这种假设令人上瘾。</p>
<h3 id="你怎么看？">你怎么看？</h3><p>让我们讨论一下统一的解决方案会是什么样的。或者可能已经有了我不知道的特别秘密的CSS标准提案。无论哪种情况，让我们免除hack之苦，向这个频繁地使用场景的标准化前进。</p>
<p>你怎么看？告诉我们吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://muxistudio.qiniudn.com/ccs_center_660_380px.jpg" alt="css centering"></p>
<p>自从文明的曙光降临以来，人类一直在斗争,对抗一切不可能之事，来达到人类进化的下一个阶段；去在这个伟大的星球上，以及环绕我们的宇宙中圈出自己的地盘；勇敢的进军任何地点…噢，原谅我这么夸张。</p>]]>
    
    </summary>
    
      <category term="html5 翻译" scheme="http://yoursite.com/tags/html5-%E7%BF%BB%E8%AF%91/"/>
    
      <category term="html5 翻译" scheme="http://yoursite.com/categories/html5-%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记(一)]]></title>
    <link href="http://yoursite.com/2015/05/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_1/"/>
    <id>http://yoursite.com/2015/05/19/读书笔记_1/</id>
    <published>2015-05-19T13:44:14.000Z</published>
    <updated>2015-05-19T15:10:42.000Z</updated>
    <content type="html"><![CDATA[<p>读老道(Douglas Crockford)的《Javascript:The Good Parts》中关于array.splice()方法的实现代码，现在自己加一些注释。  </p>
<a id="more"></a>
<pre class="prettyprint">
    //array.splice() is a method that delete some items in an array, 
    //and add new items to the place where the deleted items used 
    //to be, finally, it returns the deleted items as an array.
    Array.method('splice', function (start, deleteCount) {
    var max = Math.max,
        min = Math.min,
        delta,
        element,
        //arguments here refer to all the arguments this method
        //receive(as an array). So we should drop the first two
        //paramaters(start and deleteCount).
        insertCount = max(arguments.length - 2, 0),
        k = 0,
        len = this.length,
        new_len,
        result = [],
        shift_count;

    //if start is null, start = 0.
    start = start || 0;
    //if start is a negtive number, add start and len to get the 
    //index of the start element.
    if (start < 0) {
        start += len;
    }
    //make sure that start is no bigger than len nor smaller than 0.
    start = max(min(start, len), 0);
    //if deleteCount is not given, delete all the elments after start.
    //And make sure it is is no bigger than len nor smaller than 0.
    deleteCount = max(min(typeof deleteCount === 'number' ?
            deleteCount : len, len − start), 0);
    delta = insertCount − deleteCount;
    new_len = len + delta;
    //push this[start,start + deleteCount -1] into result, namely just 
    //set the deleted array that will be returned.
    while (k < deleteCount) {
        element = this[start + k];
        if (element !== undefined) {
            result[k] = element;
        }
        k += 1;
    }
    //shift_count is the count of remained elements in this[start,] 
    shift_count = len - start - deleteCount;
    //set the new index of the elements left in this[start,].
    if (delta < 0) {
        k = start + insertCount;
        while (shift_count) {
            this[k] = this[k − delta];
            k += 1;
            shift_count −= 1;
        }
        this.length = new_len;
    } else if (delta > 0) {
        k = 1;
        while (shift_count) {
            this[new_len − k] = this[len − k];
            k += 1;
            shift_count −= 1;
        }
    }
    //push the added items in the new index-aranged array.
    for (k = 0; k < insertCount; k += 1) {
        this[start + k] = arguments[k + 2];

    //just return the result,nail it! 
    return result;
    });
   </pre>

]]></content>
    <summary type="html">
    <![CDATA[<p>读老道(Douglas Crockford)的《Javascript:The Good Parts》中关于array.splice()方法的实现代码，现在自己加一些注释。  </p>]]>
    
    </summary>
    
      <category term="Javascript 读书笔记" scheme="http://yoursite.com/tags/Javascript-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Javascript 读书笔记" scheme="http://yoursite.com/categories/Javascript-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css像素与理想viewport宽度]]></title>
    <link href="http://yoursite.com/2015/05/12/css%E5%83%8F%E7%B4%A0%E4%B8%8E%E7%90%86%E6%83%B3viewport%E5%AE%BD%E5%BA%A6/"/>
    <id>http://yoursite.com/2015/05/12/css像素与理想viewport宽度/</id>
    <published>2015-05-12T11:57:37.000Z</published>
    <updated>2015-05-12T13:35:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近在开发移动端网页时遇到了两大问题，一是移动端的触摸事件的实现；二是移动端页面的宽度设置问题。今天先来说一说移动端的页面宽度问题。  </p>
<p>首先要说的是css的像素，一个css像素，一个px，和设备的物理像素不是一回事。<br>拿苹果的iphone来说，iphone3的分辨率是320*480，而retina屏的iphone4是640*960,  但如果在浏览器里输出视窗的宽度，两者都是320px宽。这说明Retina屏的iPhone用4个物理像素来渲染了一个css像素。iPad上的情况是相似的，新老ipad的css分辨率都是1024*768。安卓上的情况也是类似的，比如nexus 5的物理分辨率是1920*1080，而css分辨率是640*360。  关于这个可以参考一下<a href="http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html" target="_blank" rel="external">quirksmode上的博文《此像素非彼像素》</a><br><a id="more"></a><br>接下来是关于viewport的问题，我在阅读了<a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">这篇博文</a>之后对viewport的尺寸问题清楚了不少。<br>其中我们需要加以重点关注的主要是ideal viewport size（下称理想视窗宽度）。</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;
</code></pre><p>以上代码中的width=device-width可以设置视窗宽度为设备宽度，也就是理想的宽度。而上文说到的css分辨率，便是默认情况下viewport按理想宽度来显示时css的像素值。</p>
<p>因此对于移动端的网页，一般设html和body的宽为100%即可，但是由此带来的思考便是移动端网页图片尺寸的设置问题。</p>
<p><img src="http://muxistudio.qiniudn.com/blog-5-12.png" alt="一加手机微信页面"></p>
<p>这个微信页面的图片的宽度是640px，虽然手机的理想视窗宽度是320px左右，但是图片的像素还是应该和物理像素相近，不然就会出现一个物理像素渲染多个图片像素的情况。<br>而640px正是大部分iphone手机的物理像素值。如果图片尺寸按最高的设备物理像素值来设置，便会使图片过大，使网页性能下降，而iPhone的640px便达到了一个平衡，让大部分设备都有一个良好的使用体验。（当然也不排除工程师偷懒，就拿市占50%的iPhone当最佳实践了）</p>
<p>找到同样关于这个主题的<a href="http://colachan.com/post/3435" target="_blank" rel="external">一篇不错的博文</a>我自愧不如···</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在开发移动端网页时遇到了两大问题，一是移动端的触摸事件的实现；二是移动端页面的宽度设置问题。今天先来说一说移动端的页面宽度问题。  </p>
<p>首先要说的是css的像素，一个css像素，一个px，和设备的物理像素不是一回事。<br>拿苹果的iphone来说，iphone3的分辨率是320*480，而retina屏的iphone4是640*960,  但如果在浏览器里输出视窗的宽度，两者都是320px宽。这说明Retina屏的iPhone用4个物理像素来渲染了一个css像素。iPad上的情况是相似的，新老ipad的css分辨率都是1024*768。安卓上的情况也是类似的，比如nexus 5的物理分辨率是1920*1080，而css分辨率是640*360。  关于这个可以参考一下<a href="http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html">quirksmode上的博文《此像素非彼像素》</a><br>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[联创交流行]]></title>
    <link href="http://yoursite.com/2015/03/27/%E8%81%94%E5%88%9B%E4%BA%A4%E6%B5%81%E8%A1%8C/"/>
    <id>http://yoursite.com/2015/03/27/联创交流行/</id>
    <published>2015-03-27T13:29:18.000Z</published>
    <updated>2015-03-27T13:54:20.000Z</updated>
    <content type="html"><![CDATA[<p>今天托房子学姐的福，我们一行8个人去了联创交流。收获如下：<br>1.招新之道。<br>联创的招新可谓是九九八十一难。几轮面试笔试压力测试加上实习期的四轮新手任务。这也是没办法的事情，报名的人多，而且据他们说也都不怎么有基础，那就需要不断的测试来筛选有潜力的。<br>新手任务我认为是可取的一个点。在不断的自我学习中获得成长，也得到了初步的知识与技能，不失为一个启动的好办法。<br>2.待客之道。<br>联创的人给人的印象是热情坦诚，愿意分享，但不失专业。<br><a id="more"></a><br>3.团队之道。<br>如果让大家都相互熟识？如何让这个团队的气氛活跃？这个在我看来是个难题。在接下去的项目合作中大家会相互熟悉，但这样是不够的。<br>比较好的办法除了一些聚会（主动的或者被动的接触）之外，大概还有参加各种社交性的活动，比如组队去参加hackday之类的。<br>写代码不是人生的全部，在饭桌上，今夜我们不关心技术，只关心你。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天托房子学姐的福，我们一行8个人去了联创交流。收获如下：<br>1.招新之道。<br>联创的招新可谓是九九八十一难。几轮面试笔试压力测试加上实习期的四轮新手任务。这也是没办法的事情，报名的人多，而且据他们说也都不怎么有基础，那就需要不断的测试来筛选有潜力的。<br>新手任务我认为是可取的一个点。在不断的自我学习中获得成长，也得到了初步的知识与技能，不失为一个启动的好办法。<br>2.待客之道。<br>联创的人给人的印象是热情坦诚，愿意分享，但不失专业。<br>]]>
    
    </summary>
    
      <category term="木犀日常" scheme="http://yoursite.com/tags/%E6%9C%A8%E7%8A%80%E6%97%A5%E5%B8%B8/"/>
    
      <category term="木犀日常" scheme="http://yoursite.com/categories/%E6%9C%A8%E7%8A%80%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>