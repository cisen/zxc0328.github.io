<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zindex's blog]]></title>
  <subtitle><![CDATA[zindex of muxistudio]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-07-24T15:51:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Zindex]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[最佳实践之多个高度不定水平实体垂直居中]]></title>
    <link href="http://yoursite.com/2015/07/23/vertical-align-middle/"/>
    <id>http://yoursite.com/2015/07/23/vertical-align-middle/</id>
    <published>2015-07-23T14:35:05.000Z</published>
    <updated>2015-07-24T15:51:49.000Z</updated>
    <content type="html"><![CDATA[<p>如何快速并且健壮地实现高度不一定的实体的居中呢？  </p>
<p>vertical-align显然是一种办法。这个元素从语义上来看就是用来实现垂直对齐的。要理解vertical-align，首先我们得了解几个概念，inline boxes, line box, 以及baseline。  </p>
<p>inline boxes是行内元素构成的行内box，而line box则是由一行内所有的inline boxes构成的box，比如：</p>
<pre><code>&lt;div&gt;
    &lt;span&gt;我是inline box&lt;/span&gt;
    我是匿名inline box
&lt;/div&gt;
</code></pre><p>除了display为inline或者inline-block的标签会形成inline box，行内文本也会形成匿名的inline box。</p>
<p>一行所有的inline boxes构成匿名的line box，其中inline box中高度最高的那个的高度便是line box的高度，由此撑起了整行的高度。（这涉及到line-height方面的知识）</p>
<p>而关于baseline，则是文字在排版时顶部与底部中间的基线，如果是行内文本，具体位置随字体不同而不同，一般都在中线以下的位置。具体的需要参考西文字体学（Typography）(Jobs在大学旁听的课程之一，你值得拥有)  </p>
<p>而line—height其实就是两条基线之间的距离。  </p>
<p><img src="http://7oxh2b.com1.z0.glb.clouddn.com/blog_7_24_1.png" alt="baseline"></p>
<!-- more!-->
<p>对于inline-block级元素来说，基线的定义是这样的：</p>
<pre><code>The baseline of an &#39;inline-block&#39; is the baseline of its last line
box in the normal flow, unless it has either no in-flow line boxes
or if its &#39;overflow&#39; property has a computed value other than
&#39;visible&#39;, in which case the baseline is the bottom margin edge.
（CSS2.1 W3C）
</code></pre><p> 一般是正常文档流中的最后一个line box的基线。</p>
<p>我们面对的场景是这样的，一个高度固定的div，中间有数个高度不固定的div需要被垂直居中。让我们来看看vertical-align:middle的定义：</p>
<pre><code>Align the vertical midpoint of the box with the baseline of the
parent box plus half the x-height of the parent.（CSS2.1 W3C）
</code></pre><p> （元素）的垂直中点与父元素的基线加上x轴高度的一半对齐。</p>
<p> 听起来有点奇怪，什么是x-height呢，x-height其实就是上图中小写字母x占据的高度，西文字体中小写字母x占据了mean line和baseline直接的这段空间，也就是所谓的字面所在。</p>
<p> x这个字母恰好是镜面对称的，所以我们可以清楚的看到，vertical-align:middle就是将元素的中点对准x字母的中线，所以就形成了垂直居中的效果。</p>
<p> 好，现在我们来看实际的情况，我们有一个高度固定的div，然后内部有两个inline-block级的div，需要水平居中，这两个div的高度随机。</p>
<p> 代码：</p>
<pre><code>&lt;div style=&quot;height:300px;&quot;&gt;
    &lt;div style=&quot;display:inline-block&quot;&gt;我是一号div，啊啊啊啊啊啊啊啊啊啊&lt;br&gt;啊啊啊啊啊啊啊啊&lt;/div&gt;
    &lt;div style=&quot;display:inline-block&quot;&gt;我是二号div&lt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="height:100px;background-color:blue"><br>        <div style="display:inline-block;background-color:red">我是一号div，啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊</div><br>        <div style="display:inline-block;background-color:white">我是二号div</div><br></div>

<p>这是默认情况，两个div的vertical-align被设置为baseline,可以看出两个div的baseline在一条线上。第一个div的baseline是最后一个line box的baseline。</p>
<p>那么父级元素div，一个块级元素，是否存在baseline呢？答案是否定的，在inline-block元素处于块极元素内部的情况下，vertical-align更多与同级inline-block元素的相互对齐有关，而和父级元素无关。</p>
<p>可以实验一下，我们把父级div设为inline-block，看看会发生什么事情。</p>
<pre><code>&lt;div style=&quot;display:inline-block;line-height:100px;background-
color:blue&quot;&gt;
    &lt;div style=&quot;display:inline-block;background-color:red&quot;&gt;
    我是一号div，啊啊啊啊啊啊啊啊啊啊&lt;br&gt;啊啊啊啊啊啊啊啊
    &lt;/div&gt;
    &lt;div style=&quot;display:inline-block;background-color:white&quot;&gt;
    我是二号div
    &lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="display:inline-block;line-height:100px;background-color:blue;font-size:150px"><div style="display:inline-block;background-color:red;font-size:15px">我是一号div，啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊</div><div style="display:inline-block;background-color:white;font-size:15px">我是二号div</div>X</div>

<p>这里我将父级div设为inline-block并且把line-height设为100px，因此其子元素的基线就和父元素的基线对齐了。我特意放了一个特大号的字，X的底部便是baseline了。</p>
<p>了解到这一点之后，我们便清楚了，父元素是块级元素的情况下，vertical-align只和同级元素有关。vertical-align:middle便是同级元素的中线相互对齐。</p>
<p>我们只需要一个空的div，它只起占位的作用，高度是100%，宽度是0，于是，其他高度小于父元素的子元素便会与这个占位元素的中线对齐，也就达到了垂直对齐。</p>
<pre><code>&lt;div style=&quot;height:100px;background-color:blue;font-size:0&quot;&gt;
    &lt;div style=&quot;height:100%;width:0;display:inline-block;vertical-
    align:middle&quot;&gt;&lt;/div&gt;
    &lt;div style=&quot;display:inline-block;background-color:red;font-size:
    15px;vertical-align:middle&quot;&gt;我是一号div，啊啊啊啊啊啊啊啊啊啊&lt;br&gt;啊啊
    啊啊啊啊啊啊&lt;/div&gt;
    &lt;div style=&quot;display:inline-block;background-color:white;font-
    size:15px;vertical-align:middle&quot;&gt;我是二号div&lt;/div&gt;
   &lt;/div&gt;
</code></pre><div style="height:100px;background-color:blue;font-size:0"><br>        <div style="height:100%;width:0;display:inline-block;vertical-align:middle"></div><br>        <div style="display:inline-block;background-color:red;font-size:15px;vertical-align:middle">我是一号div，啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊</div><br>        <div style="display:inline-block;background-color:white;font-size:15px;vertical-align:middle">我是二号div</div>

<p></p></div><p></p>
<p>垂直居中的效果就达成了！</p>
<p>ok，用:before伪元素来实现也是一个很不错的做法，相比空div要更简洁一些。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如何快速并且健壮地实现高度不一定的实体的居中呢？  </p>
<p>vertical-align显然是一种办法。这个元素从语义上来看就是用来实现垂直对齐的。要理解vertical-align，首先我们得了解几个概念，inline boxes, line box, 以及bas]]>
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web Animation Using Javascript part one]]></title>
    <link href="http://yoursite.com/2015/05/23/Web-Animation-Using-Javascript-part-one/"/>
    <id>http://yoursite.com/2015/05/23/Web-Animation-Using-Javascript-part-one/</id>
    <published>2015-05-23T14:47:00.000Z</published>
    <updated>2015-06-12T11:52:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="第二章：Velocity-js动画">第二章：Velocity.js动画</h2><p>在这一章，你将学到由Velocity.js提供的特性，指令，和选项。如果你熟悉基于jQuery的动画，那么你已经知道如何使用Velocity.js了；它的功能几乎和jQuery的$.animate()函数一模一样。</p>
<p>不过抛开你现有的知识，本章中对特性的井井有条的分类将会向你介绍动画引擎行为的细微差别。掌握这些细微差别将会帮助你从新手成为专业人士。即使你已经对jQuery动画和Velocity.js相当熟悉了，也给自己一个机会，快速浏览本章。<strong>你必定会发现一些你没意识到的可行之事。</strong><br><a id="more"></a></p>
<h3 id="JavaScript动画库类型">JavaScript动画库类型</h3><p>JavaScript动画库有很多类型。有些在浏览器中重现物理接触效果。有些使WebGL和Canvas动画更容易维护。有些专注于SVG动画。有些改善了UI动画————最后这种类型正是本书的重点。</p>
<p>两种广受欢迎的UI动画库是GSAP和Velocity。你将在本书中使用Velocity，因为它在MIT许可下是免费的，外加它拥有极其强大的功能以供编写整洁且富有表现力的动画代码。Velocity被很多知名站点使用，包括Tumblr，Gap，还有Scribd。</p>
<p>噢，而且它是由本书的作者创造的！</p>
<h3 id="安装jQuery和Velocity">安装jQuery和Velocity</h3><p>你可以从jQuery.com下载jQuery，从VelosityJS.org下载Velosity。在你的页面上使用它们——和任何JavaScript库一样——简单地把指向相应库文件的<code>&lt;script&gt; &lt;/script&gt;</code>标签放在你页面的<code>&lt;/body&gt;</code>标签之前。如果你想链接预部署版本的库文件（而不是你电脑上的本地拷贝），你的代码看起来可能是这样：</p>
<pre><code>&lt;html&gt;
      &lt;head&gt;My Page&lt;/head&gt;
   &lt;body&gt;
         My content.
         &lt;script src=”//code.jquery.com/jquery-2.1.1.min.js”&gt;
       &lt;/script&gt;
       &lt;script src=”//cdn.jsdelivr.net/velocity/1.1.0/
       velocity.min.js”&gt;
       &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>当一起使用jQuery和Velocity时，在Velocity前引入jQuery。<br>这就对了！现在你已经准备好了。</p>
<h2 id="使用Velocity:基础">使用Velocity:基础</h2><p>为了熟悉Velocity，我们将从基本的组件开始：参数，属性，值，和链式调用。因为jQuery几乎无所不在，看看Velocity和jQuery的关系也是有必要的。</p>
<h3 id="Velocity和jQuery">Velocity和jQuery</h3><p>Velocity可以独立于jQuery运行，但是二者可以一起使用。一般我们推荐这么做来获得jQuery的链式调用能力：当你已经使用jQuery预选择了一个元素，你可以调用.velocity()来拓展它从而施加动画效果：</p>
<pre><code>// 把jQuery元素对象赋值给一个变量
var $div = $(“div”);
// 使用Velocity对元素施加动画
$div.velocity({ opacity: 0 });
这种语法和jQuery自带的animate函数一模一样：
$div.animate({ opacity: 0 });
</code></pre><p>本书所有的例子都使用Velocity和jQuery的结合，因此可以使用这种语法。</p>
<h3 id="参数">参数</h3><p>Velocity接收多个参数。第一个参数是一个映射CSS属性到其最终值的对象。属性及其接收值的类型直接与CSS中使用的相对应（如果你不熟悉基础的CSS属性，在读这段代码之前读一本HTML和CSS的介绍性书籍）：</p>
<pre><code> // 对元素施加动画使width变为“500px”，opacity变为1。
 $element.velocity({ width: “500px”, opacity: 1 });
</code></pre><p> —<br> <em>Tip</em>  </p>
<h2 id="在JavaScript中，如果你将要提供一个包含字母（而不是只有整数）的属性值，把属性值放在引号中。"> 在JavaScript中，如果你将要提供一个包含字母（而不是只有整数）的属性值，把属性值放在引号中。</h2><p>你可以传递一个指定了动画选项的对象作为第二个参数。</p>
<pre><code>$element.velocity({ width: “500px”, opacity: 1 }, { duration: 400, 
easing: “swing” });
</code></pre><p>这里也有一个简写的参数语法：你可以使用逗号分隔语法，而不是传递一个包含选项的对象作为第二个参数。这要求以任何逗号分隔的顺序列出动画时长的值（接收一个整数），缓动模式（一个字符串），以及回调函数（一个函数）。（你一会将会学到这些选项的作用。）</p>
<pre><code>  //时长1000ms的动画 (使用默认缓动模式swing)
  $element.velocity({ top: 50 }, 1000);
  //时长1000ms的动画，并且使用缓动模式“ease-in-out”
  $element.velocity({ top: 50 }, 1000, “ease-in-out”);
 //使用缓动模式“ease-out”，使用默认时长值400ms)
 $element.velocity({ top: 50 }, “ease-out”);
 //时长1000ms的动画,并且在动画完成时触发一个回调函数        
 $element.velocity({ top: 50 }, 1000, function() 
 { alert(“Complete.”) });
</code></pre><p>当你只需要指定基本选项(时长，缓动模式，回调函数)的时候，这个简写语法是一种传递动画选项的快捷方法。如果你在这三个选项之外传递一个动画选项，你必须把所有选项调回对象语法。<br>因此，如果你想要指定一个延时选项，改变以下的语法：</p>
<pre><code>$element.velocity({ top: 50 }, 1000, “ease-in-out”);
</code></pre><p>到这种语法：</p>
<pre><code>//重新指定上面使用的动画选项，但包括一个值为500ms的延时选项  
$element.velocity({ top: 50 }, { duration: 1000, easing: “ease-in-
out”, delay: 500 });
</code></pre><p>你不能这么做：</p>
<pre><code>//错误：把动画选项分为逗号分隔语法和对象语法来写
$element.velocity({ top: 50 }, 1000, { easing: “ease-in-out”, 
delay: 500 });
</code></pre><h3 id="属性">属性</h3><p>基于CSS的属性动画和基于JavaScript的属性动画有两处区别。</p>
<p>首先，不像在CSS中那样，Velocity中每个CSS属性只接收单个数值。所以，你可以传入：</p>
<pre><code>$element.velocity({ padding: 10 });
</code></pre><p>或者：</p>
<pre><code>$element.velocity({ paddingLeft: 10, paddingRight: 10 });
</code></pre><p>但是你不能传入:</p>
<pre><code>// 错误：CSS属性被传入了多个数值
$element.velocity({ padding: “10 10 10 10” });
</code></pre><p>如果你想要把四个padding值(top, right, bottom, 和 left)加入动画，将它们列为分离的属性。</p>
<pre><code>// 正确
$element.velocity({
  paddingTop: 10,
  paddingRight: 10,
  paddingBottom: 10,
  paddingLeft: 10
});
</code></pre><p>其他可以接收多个数值的常见CSS属性包括<code>magrin</code>，<code>transform</code>， <code>text-shadow</code>，和<code>box-shadow</code>。</p>
<p>为了形成动画而将组合属性分离到它们的子属性中给了你对缓动值的进一步控制。举个例子，在CSS中，当对父padding属性下的多个子属性施加动画时，你只可以指定一种属性范围的缓动类型。在JavaScript中，你可以为每个子属性指定独立的缓动值——这个特性的优势会在之后这章关于CSS transform属性的讨论中变得明确。</p>
<p>列出我们的独立子属性也可以使你的动画代码更易阅读和维护。</p>
<p>基于CSS的属性动画和基于JavaScript的属性动画的第二处不同是JavaScript属性没有词与词之间的横杠，第一个词之后的所有词必须大写。例如，padding-left变成了paddingLeft，而background-color变成了backgroundColor。还有一点，JavaScript属性名不应该被置于引号中：</p>
<pre><code>// 正确
$element.velocity({ paddingLeft: 10 });
// 错误: 使用了横杠且没有大写
$element.velocity({ padding-left: 10 });
// 错误：在JavaScript格式的属性名两边使用了引号
$element.velocity({ “paddingLeft”: 10 });
</code></pre><h3 id="值">值</h3><p>Velocity支持<code>px</code>,<code>em</code>,<code>rem</code>,<code>%</code>,<code>deg</code>,<code>vw</code>和<code>vh</code>单位。如果你没有为数值提供某个类型的单位，一个基于CSS属性类型的合适的单位会被自动添加。对于大多数属性，px是默认单位，不过一个接收旋转角度的属性，比如rotateZ,会被自动添加deg单位：</p>
<pre><code>$element.velocity({
  top: 50, // 默认设置为px单位类型
  left: “50%”, // 我们手动指定了%单位类型      
  rotateZ: 25 // 默认设置为deg单位类型
});
</code></pre><p>为你所有的属性值显式声明单位类型，通过使px单位和它的替代选择之间的对比更加明显来增加代码在快速浏览时的清晰程度。</p>
<p>另一个Velocity相对于CSS的优势是它支持可以被选择性添加在属性值之前的四种数值运算符：+，—，*，和/。它们和JavaScript中的数学运算符一一对应。你可以把这些数值运算符与一个等号组合来进行相应的数学运算。请参考实例中的行内代码注释：</p>
<pre><code>$element.velocity({
  top: “50px”, // 没有运算符。不出所料地向前运动50px。
  left: “-50”, // 负运算符。不出所料地向前运动-50px。
  width: “+=5rem”, // 将当前宽度值转换为对应的rem值并加上5个单位值。
  height: “-10rem”, // 将当前高度值转换为对应的rem值并减去10个单位值。
  paddingLeft: “*=2” // 把当前的paddingLeft值加倍。
  paddingRight: “/=2” // 把当前的paddingLeft值除以2。
 });
</code></pre><p>Velocity的简写特性，像数值运算符，把动画逻辑完全保留在动画引擎中。这不仅仅因排除了手动数值计算而使代码更加简洁，也通过告诉Velocity更多你计划如何对元素施加动画来提升了性能。Velocity处理的逻辑越多，它优化你的代码来达到更高的帧数的能力就越强。</p>
<h3 id="链式调用">链式调用</h3><p>当多个Velocity调用被连续链接在一个元素（或一系列元素）上的时候，它们会自动形成队列。这说明每个动画在前一个动画完成时开始：</p>
<pre><code>$element
  // 对width和height属性施加动画
  .velocity({ width: “100px”, height: “100px” })
  // 当宽度和高度的动画完成之后，对top属性施加动画
  .velocity({ top: “50px” });
</code></pre><h2 id="使用Velocity:选项">使用Velocity:选项</h2><p>为了完善对Velocity的介绍，让我们快速浏览最常用的选项:时长，缓动，起始回调及结束回调，循环，延时，和显示。</p>
<h3 id="时长">时长</h3><p>你可以指定时长选项，它决定了一个动画调用要多长时间结束，以毫秒（1/1000秒）为单位或是三种简写时长之一：“慢”（相当于600ms），“普通”（400ms），或者“快”（200ms）。当以毫秒指定一个时长值时，应提供一个不带任何单位类型的整数：</p>
<pre><code>// 施加时长1000ms（1秒）的动画
$element.velocity({ opacity: 1 }, { duration: 1000 });
</code></pre><p>或者：</p>
<pre><code>$element.velocity({ opacity: 1}, { duration: “slow” });
</code></pre><p>当你回顾你的代码时，使用命了名的简写时长的好处是它们表达了一个动画的节奏（是慢还是快？）。如果你全部使用这些简写，它们自然也将带给你的站点更统一的动画设计，因为所有的动画将会落在三个速度分类中而不是被传递一个随意的值。</p>
<h3 id="缓动">缓动</h3><p>缓动是定义一个动画的整个过程中不同部分发生快慢的数学函数。举个例子,“ease-in-out”缓动类型表明动画应该在第一部分缓缓加速（淡入）然后在最后部分缓缓减速（淡出）。相比之下，“ease-in”缓动类型产生的动画在第一部分加速到一个目标速度但随后保持一个恒定速度直到动画完成。“ease-out”缓动类型是“ease-in”的相反情况，动画开始并且保持一个恒定速度直到在动画的最后部分缓缓减速。</p>
<p>与第一章，“JavaScript动画的优势”中讨论的基于物理的运动很相似，缓动给你力量来向你的动画注入人格。拿一个使用线性缓动的动画会让人感到多么的机械来说。（线性缓动产生一种以相同速率开始，运行，和结束的动画。）这种机械的感受是与现实世界的线性机械运动相联系的结果：自我导航的机械物体往往以直线移动并且以恒定速度操作，因为没有任何美学的抑或生理的原因去让它们不那么做。</p>
<p>与此相对，有生命的东西-不管是人体或是正被风吹的树-在真实世界中从不以一个恒定的速度移动。摩擦力和其他外部力量令它们以不同的速度移动。</p>
<p>伟大的动画设计师对有机的运动怀有敬意，因为这让人感觉界面正流畅地回应用户的互动。在移动应用中，举个例子，你希望一个菜单在你将它滑出屏幕时马上加速离开你的手指。如果菜单只是以一个恒定速度从你的手指移开-像一个机械手臂-你将会感到滑动只是触发了一连串不受你控制的运动事件。</p>
<p>关于缓动类型的力量，你将会在第三章：“动画设计理论”中学到更多。对于现在，让我们快速浏览Velocity的所有可用的缓动类型：</p>
<p>+jQuery UI的三角函数缓动。关于这些缓动方程的完整列表，以及它们的加速效果简介的互动演示，请查阅easing.net上的demo。</p>
<pre><code>$element.velocity({ width: “100px” }, “easeInOutSine”);
</code></pre><p>+CSS缓动：”ease-in”, “ease-out”, “ease-in-out”, 和 “ease” (一个与”ease-in-out”有细微不同的版本)。</p>
<pre><code>$element.velocity({ width: “100px” }, “ease-in-out”);
</code></pre><p>+CSS贝塞尔曲线：贝塞尔曲线缓动允许对一个缓动加速曲线结构的完全控制。一条贝塞尔曲线通过指定一张图表上四个等距点的高度来定义，Velocity接收的图表格式是有四项二进制值的数组。访问cubic-bezier.com来查看一个创建贝塞尔曲线的互动指南。</p>
<pre><code>$element.velocity({ width: “100px” }, [ 0.17, 0.67, 0.83, 
0.67 ]);
</code></pre><p>+弹簧模型：这种缓动类型模仿一个被拉伸然后突然释放的弹簧的弹性形变。正如定义弹簧运动的经典物理方程，这种缓动类型允许你传递一个形式为[张力，摩擦力]的二项数组。一个更高的张力值（默认为500）增加了总速度及弹性。一个更低的摩擦力（默认为20）增加了振动结束时的速度。</p>
<pre><code>$element.velocity({ width: “100px” }, [ 250, 15 ]);
</code></pre><p>+“spring”缓动是一种预定义的弹簧模型的实现，它在你不想试验张力和摩擦力值的时候使用方便。</p>
<pre><code>$element.velocity({ width: “100px” }, “spring”);
</code></pre><p>记住你也可以传递缓动选项作为一个选项对象参数中的一个直接定义的属性。</p>
<pre><code>$element.velocity({ width: 50 }, { easing: “spring” });
</code></pre><p>不要被你可用的缓动选项的数量吓倒。你将经常依靠CSS缓动类型和“spring”缓动，它们适合绝大部分动画使用实例。最复杂的缓动类型，贝塞尔曲线，被脑中有一个高度具体的缓动方式且不怕麻烦的开发者使用最多。</p>
<p><em>注意</em></p>
<p>本节其余的Velocity选项必须被直接传递入一个选项对象。不像那些已经被描述的，这些附加选项不能以简写的逗号分隔语法在Velocity中使用。</p>
<h3 id="起始回调和结束回调">起始回调和结束回调</h3><p><code>begin</code>和<code>complete</code>选项允许你指定在动画中的特定节点被触发的函数：给<code>begin</code>选项传递一个在动画开始前被调用的函数。相反地，传给<code>complete</code>选项一个在动画完成时被调用的函数。</p>
<p>在这两种选项中，函数在每次动画调用时只被调用一次，就算多个元素同时被施加动画：</p>
<pre><code>var $divs = $(“div”);
$divs.velocity(
   { opacity: 0 },
   // 在动画开始前打开一个警告窗口
   {
   begin: function () { console.log(“Begin!”); },
    // 一旦动画完成就打开一个警告窗口
   complete: function () { console.log(“Complete!”); }
} );
</code></pre><p><em>回调函数</em></p>
<p>这些选项常被叫做“回调函数”（或“回调”）因为它们将在特定的事件发生时被“调用”。回调函数对触发依赖于元素可见度的事件十分有用。举个例子，如果一个元素在开始时不可见，然后发生动画使透明度变为1，那么随后触发一个UI事件，一旦用户能看见新内容时便更改内容，可能是合适的。</p>
<p>记住你不需要使用回调函数来依次排列动画；当多个动画被指派在单个元素或一组元素上时，动画会自动按顺序触发。回调函数用来使非动画逻辑形成队列。</p>
<h3 id="循环">循环</h3><p>把循环选项设成一个整数，指定了一个动画在被调用时的属性映射表中的值与调用前元素的这些值之间应交替的次数：</p>
<pre><code>$element.velocity({ height: “10em” }, { loop: 2 });
</code></pre><p>如果元素的初始高度是5em，它的高度会在5em和10em之间交替两次。</p>
<p>如果<code>begin</code>和<code>complete</code>选项在一个循环的调用中被使用，它们会被各触发一次-分别在最开始和整个循环队列的终点；它们不会在每次循环交替中被重复触发。</p>
<p>你也可以传递<code>true</code>来触发无限循环，而不是传递一个整数：</p>
<pre><code>$element.velocity({ height: “10em” }, { loop: true });
</code></pre><p>无限循环忽略了<code>complete</code>回调，因为它们不会自然结束。然而，它们可以通过Velocity的<code>stop</code>命令被手动结束：</p>
<pre><code>$element.velocity(“stop”);
</code></pre><p>非无限循环对动画队列是有用的，不然它们将需要重复链式动画的代码。举个例子，如果你想要让一个元素弹上弹下两次（也许是警告用户有一条新消息在等待他们），没有优化的代码看起来大概是这样：</p>
<pre><code>$element
  // 假定translateY开始时为“0px”
  .velocity({ translateY: “100px” })
  .velocity({ translateY: “0px” })
  .velocity({ translateY: “100px” })
  .velocity({ translateY: “0px” });
</code></pre><p>更紧凑且易维护的代码版本看起来大概是这样：</p>
<pre><code>// 重复（循环）这段动画两次
$element.velocity({ translateY: “100px” }, { loop: 2 });
</code></pre><p>有了这个优化的版本，如果你已经在心里想好了最大值应该被改变多少（当前是100px），你只需要在一部分代码中更改最大值。如果在你的代码中有很多这种重复的例子，那么循环对你的工作流多么有益，是显而易见的。</p>
<p>无限循环对加载指示器有巨大的帮助，加载指示器一般无限循环动画直到数据被加载完成。</p>
<p>首先，通过使加载指示器元素的透明度在可见和不可见之间无限循环，令其表现为有节奏的闪动：</p>
<pre><code>// 假定透明度开始时是1（完全可见）
$element.velocity({ opacity: 0 }, { loop: true });
</code></pre><p>然后，一旦数据结束加载，你可以停止动画，然后隐藏这个元素：</p>
<pre><code>$element
  // 首先停止无限循环
  .velocity(“stop”)
  // ... 所以你可以对元素施加一个新动画，
  // 你可以施加它来使元素变回不可见。
  .velocity({ opacity: 0 });
</code></pre><h3 id="延时">延时</h3><p>以毫秒指定延时选项,来在动画开始之前插入一个暂停。延时选项的目标是把动画的计时逻辑完整保留在Velocity中-与在一个Velocity动画开始时依赖使用jQuery的$.delay()函数来改变相反：</p>
<pre><code>//在进行动画使透明度变为0之前等待100ms
$element.velocity({ opacity: 0 }, { delay: 100 });
</code></pre><p>你可以把loop选项和delay选项一起设定来创建一个循环交替间的暂停：</p>
<pre><code>// 循环四次，在每次循环前等待100ms
$element.velocity({ height: “+=50px” }, { loop: 4, delay: 
100 });
</code></pre><h3 id="显示与可见度">显示与可见度</h3><p>Velocity的显示与可见度选项与它们的CSS同仁直接对应，并且接收同样的值，包括：“none”，“inline”，“inline-block”，“block”，“flex”，等等。另外，Velocity允许“auto”值，这指定<code>display</code>属性为元素的默认值。（作为参考，a和span标签默认为“inline”，而div和大部分其他元素默认为“block“）。Velocity的可见度选项，像它的CSS同仁一样，接收”hidden“，”visible“，和”collapse“值。</p>
<p>在Velocity中，当<code>display</code>选项被设为”none“(或可见度被设为”hidden“)，一旦动画完成，元素的CSS属性即被相应地设置。这有效地使元素在动画完成时被隐藏，并且在与将元素的透明度变为0的动画联合使用时很有用（这里的意图是将一个元素淡出至页面外）：</p>
<pre><code>// 使一个元素的透明度渐变为0，然后把它移出页面文档流
$element.velocity({ opacity: 0 }, { display: “none” });
</code></pre><p><em>注意</em></p>
<p>上面的代码有效地替换了jQuery中的等效代码：</p>
<pre><code>$element
        .animate({ opacity:0 })
        .hide();
</code></pre><p><em>快速回顾：可见度与显示</em></p>
<p>以供参考，CSS<code>display</code>属性指定了一个元素如何影响它周围的元素以及被它包含的元素的定位。对比之下，CSS<code>visibility</code>属性仅仅影响一个元素是否能被看见。如果一个元素被设为”visibility:hidden”,它将继续在页面中占据空间，但是这个空间将简单地表现为一个空间隔-这个元素的每一部分都是不可见的。作为替代，如果一个元素被设为“display:none”，这个元素将完全从页面文档流中被移除，并且所有在其中或环绕它的元素将填补被移除元素的空间，好像这个元素从未存在过。</p>
<p>注意，你可以设置元素的visibility为”hidden“来简单地把元素同时标记为不可见和无法交互，而不是把这个元素移出页面文档流。当你想隐藏一个继续在页面上占位的元素时这很有用：</p>
<pre><code>// 将一个元素淡入到opacity:0，然后让它变得无法交互
$element.velocity({ opacity: 0 }, { visibility: “hidden” });
</code></pre><p>现在，让我们考虑相反方向的动画（显示元素而不是隐藏元素）：当<code>diaplay</code>或<code>visibility</code>被设为”none“或”hidden“之外的值，这个值会在动画开始前被设置，因此元素在即将到来的动画过程中是可见的。换句话说，你正在取消之前元素被移出视图时发生的隐藏过程。</p>
<p>以下，<code>display</code>在元素开始淡入之前被设为”block“：</p>
<pre><code>$element.velocity({ opacity: 1 }, { display: “block” });
</code></pre><p>这有效地替换了等效的jQuery代码：</p>
<pre><code>$element
  .show()
  .animate({ opacity: 0 });
</code></pre><p><em>提示</em></p>
<p>查看Velocity动画选项的完整概述，请查阅Velocity.org的文档。</p>
<p><em>包含动画逻辑</em></p>
<p>加上Velocity的<code>delay</code>选项，Velocity对CSS<code>display</code>和<code>visibility</code>设定的包含允许动画逻辑被完全保留在Velocity中。在生产环境代码中，每当一个元素被淡入或淡出视图时，几乎总伴随着<code>display</code>和<code>visibility</code>上的改变。借助像这样的Velocity简写帮助你保持你的代码干净且易于维护，因为这样对外部jQuery函数的依赖更少，并且避免了重复使用通常会使动画逻辑臃肿的辅助函数。</p>
<p>注意Velocity包括了以上演示的切换透明度动画的简写方式。它们的功能和jQuery的<code>fadeIn</code>及<code>fadeOut</code>函数一模一样。你仅需传递相应地传递命令给Velocity作为第一个参数，并且，如果想要的话，你可以传入一个选项对象，像往常一样。</p>
<pre><code>$element.velocity(“fadeIn”, { duration: 1000 });
$element.velocity(“fadeOut”, { duration: 1000 });
</code></pre><h2 id="使用Velocity：附加特性">使用Velocity：附加特性</h2><p>附加的Velocity.js特性中值得注意的包括：回退命令，滚动，颜色，和变形（平移，旋转，和缩放）。</p>
<h3 id="回退命令">回退命令</h3><p>传递“reverse”作为Velocity的第一个参数，来使元素发生动画返回至上一个Velocity调用前的值。<code>reverse</code>命令和一个标准的Velocity命令表现一样；它可以带有参数并且会和其他链式Velocity调用一起被加入队列。</p>
<p>回退默认设置了元素的上一个Velocity的调用中使用的选项（时长，缓动，等等）。然而，你可以传递一个新选项对象来覆写这些选项：</p>
<pre><code>// 使用上一个Velocity调用的选项来施加动画返回初始值
$element.velocity(“reverse”);
</code></pre><p>或</p>
<pre><code>// 做和上面一样的事，不过把上一个Velocity调用的时长值替换为2000ms
$element.velocity(“reverse”, { duration: 2000 });
</code></pre><p><em>注意</em></p>
<p>前一个调用的<code>begin</code>和<code>complete</code>选项被<code>reverse</code>命令忽视了；<code>reverse</code>从不重复调用回调函数。</p>
<h3 id="滚动">滚动</h3><p>传递“scroll”作为Velocity的第一个参数来滚动浏览器至一个元素的顶部。<code>scroll</code>命令和一个标准的Velocity调用表现一模一样；它可以带有参数并且会和其他链式Velocity调用一起被加入队列：</p>
<pre><code>$element
  .velocity(“scroll”, { duration: 1000, easing: “spring” })
  .velocity({ opacity: 1 });
</code></pre><p>这使用1000ms的时长和“spring”缓动将浏览器滚动到元素的顶部。然后，一旦元素被滚动进入视窗，它会完全淡入。</p>
<p>为了向一个父元素有滚动条的元素滚动，你可以使用<code>container</code>选项，它接收一个jQuery对象或者一个原始的元素。注意CSS<code>position</code>属性必须被设为<code>relative</code>,<code>absolute</code>,或者<code>fixed</code>中的一个-<code>static</code>不会起作用。</p>
<pre><code>// 滚动元素进入$(“#container”)元素的视图中
$element.velocity(“scroll”, { container: $(“#container”) });
</code></pre><p>在两种情况中-不管滚动是相对于浏览器窗口还是相对于一个父元素-滚动命令总是被调用在<em>正被滚动进入视窗</em>的元素上。</p>
<p>默认情况下，滚动发生在y轴。传入<code>axis：x</code>选项来水平滚动来取代垂直滚动：</p>
<pre><code>// 滚动浏览器到目标div的左边缘
$element.velocity(“scroll”, { axis: “x” });
</code></pre><p>最后，滚动命令还独特地接收一个以px设定的<code>offset</code>选项，它偏移了目标滚动位置：</p>
<pre><code>// 滚动到距离元素上边缘上方50px的位置
$element.velocity(“scroll”, { duration: 1000, offset: “-50px” });
// 滚动到距离元素上边缘下方250px的位置
$element.velocity(“scroll”, { duration: 1000, offset: “250px” });
</code></pre><h3 id="颜色">颜色</h3><p>Velocity支持这些CSS属性：<code>color</code>,<code>backgroundColor</code>, <code>borderColor</code>,和<code>outlineColor</code>的颜色动画。在Velocity中，颜色属性只接收16进制，举个例子，#000000（黑色）或#e2e2e2（浅灰）。为了达到颗粒度更小的颜色控制，你可以对颜色属性的单个红，绿，和蓝分量进行动画，也包括alpha通道分量。红，绿和蓝的数值范围在0到255之间，alpha通道（等同于透明度）的范围在0到1之间。</p>
<p>参考以下例子中的行内注释：</p>
<pre><code>$element.velocity({
  // 施加动画使背景颜色变到以十六进制表示的黑色
  backgroundColor: “#000000”,
  // 同步地施加动画使背景的alpha分量（透明度）变到50%
  backgroundColorAlpha: 0.5,
  // 也对元素的文本颜色的red分量施加动画使其变为总量的一半
  colorRed: 125
});
</code></pre><h3 id="变形">变形</h3><p>CSS变形属性对在2D和3D空间的元素施加平移，缩放，和旋转操作。它包括很多子组件，其中Velocity支持以下几种：</p>
<p>+<code>translateX</code>:沿x轴移动一个元素<br>+<code>translateY</code>:沿y轴移动一个元素<br>+<code>rotateZ</code>:沿z轴旋转一个元素（在2D表面上实际为顺时针或逆时针）<br>+<code>rotateX</code>:沿x轴旋转一个元素（在3D空间里实际为移向用户或远离用户）<br>+<code>rotateY</code>:沿y轴旋转一个元素（在3D空间里实际为向左移动或向右移动）<br>+<code>scaleX</code>:增加一个元素的宽度值<br>+<code>scaleY</code>:增加一个元素的高度值</p>
<p>在Velocity中，你可以在一个属性对象中以单独属性来施加这些组件带来的动画效果：</p>
<pre><code>$element.velocity({
  translateZ: “200px”,
  rotateZ: “45deg”
});
</code></pre><h2 id="使用Velocity：不使用jQuery（中级）">使用Velocity：不使用jQuery（中级）</h2><p>如果你是一个宁愿不借助jQuery的帮助来使用JavaScript工作的中级开发者，你将会高兴地得知Velocity也可以在jQuery不出现在页面上的时候工作。相应地，目标元素被直接传递入动画调用作为第一个参数，而不是把一个动画调用链接到一个jQuery元素对象上-就像本章之前的示例：</p>
<pre><code>Velocity(element, { opacity: 0.5 }, 1000); // Velocity
</code></pre><p>就算Velocity脱离jQuery被使用，它也保持和jQuery的$.animate()一样的语法；区别在于所有的参数都被向右移动来腾出位置以便在首位传入目标元素。另外，全局Velocity对象而不是具体的jQuery元素对象被用于调用动画。</p>
<p>当你脱离jQuery使用Velocity时，你不再对jQuery对象施加动画，而是原生文档对象模型（DOM）元素。原生DOM元素可以通过以下函数获取：</p>
<p>+<code>document.getElementByID()</code>：用ID属性获取一个元素<br>+<code>document.getElementsByTagName()</code>获取带有特定标签名的所有元素<br>+<code>document.getElementsByClassName()</code>获取带有特定CSS类的所有元素<br>+<code>document.querySelectorAll()</code>这个函数和jQuery的选择引擎的作用一模一样</p>
<p>让我们进一步探索<code>document.querySelectorAll()</code>，因为它可能将成为你在不借助jQuery帮助时选择元素的利器。（这是一个性能强大的且被众浏览器广泛支持的函数。）使用jQuery的元素选择器语法，你可以简单地传递给<code>querySelectorAll</code>一个CSS选择器（和你在样式表中用来选择目标元素的选择器一样），并且它将以一个数组的形式返回所有符合的元素：</p>
<pre><code>document.querySelectorAll(“body”); // 获取body元素
document.querySelectorAll(“.squares”); // 获取所有带“square”类的元素     
document.querySelectorAll(“div”); // 获取所有div
document.querySelectorAll(“#main”); //  获取所有id为“main”的元素 
document.querySelectorAll(“#main div”); // 获取所有id为“main”的元素中的
div
</code></pre><p>如果你把这些查找之一的结果赋值给一个变量，随后你可以重复使用这个变量来对目标元素施加动画：</p>
<pre><code>// 获取所有元素
var divs = document.querySelectorAll(“div”);
// 对所有div施加动画
Velocity(divs, { opacity: 0 }, 1000);
</code></pre><p>因为你不再拓展jQuery元素对象，你可能在想如何把元素一个个链接起来，像这样：</p>
<pre><code>// 它们彼此链接
$element
   .velocity({ opacity: 0.5 }, 1000)
   .velocity({ opacity: 1 }, 1000);
</code></pre><p>为了不借助jQuery来再现这个模式，简单地把一个函数接着另一个函数调用：</p>
<pre><code>// 对同样地元素施加的动画彼此自动链接起来
Velocity(element, { opacity: 0 }, 1000);
Velocity(element, { opacity: 1 }, 1000);
</code></pre><h3 id="结语">结语</h3><p>现在你已经有了对使用JavaScript进行web动画的好处的认识，加上对Velocity基础的一些掌握，你已经准备好去探索专业动画设计之下的迷人理论基础。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第二章：Velocity-js动画">第二章：Velocity.js动画</h2><p>在这一章，你将学到由Velocity.js提供的特性，指令，和选项。如果你熟悉基于jQuery的动画，那么你已经知道如何使用Velocity.js了；它的功能几乎和jQuery的$.animate()函数一模一样。</p>
<p>不过抛开你现有的知识，本章中对特性的井井有条的分类将会向你介绍动画引擎行为的细微差别。掌握这些细微差别将会帮助你从新手成为专业人士。即使你已经对jQuery动画和Velocity.js相当熟悉了，也给自己一个机会，快速浏览本章。<strong>你必定会发现一些你没意识到的可行之事。</strong><br>]]>
    
    </summary>
    
      <category term="翻译,Javascript" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91-Javascript/"/>
    
      <category term="翻译,Javascript" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91-Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[居中一切(centering all the directions)by KYLE SIMPSON]]></title>
    <link href="http://yoursite.com/2015/05/21/centering-all-the-directions/"/>
    <id>http://yoursite.com/2015/05/21/centering-all-the-directions/</id>
    <published>2015-05-21T14:53:26.000Z</published>
    <updated>2015-05-23T14:45:52.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://muxistudio.qiniudn.com/ccs_center_660_380px.jpg" alt="css centering"></p>
<p>自从文明的曙光降临以来，人类一直在斗争,对抗一切不可能之事，来达到人类进化的下一个阶段；去在这个伟大的星球上，以及环绕我们的宇宙中圈出自己的地盘；勇敢的进军任何地点…噢，原谅我这么夸张。</p>
<a id="more"></a>
<p><img src="http://muxistudio.qiniudn.com/e594bf4bef370534e5b4470b8fd2c4d5.png" alt="twitter"></p>
<p>我想说，“如果你曾与用css居中内容(尤其是垂直居中)苦战，请举手。”其实说“如果你从没有挣扎过…请举手。”可能更快些。CSS是一种强大到让人震惊的工具，但是还是有一些事情，比如垂直居中，甚至在今天仍处于“太TM难了”的状态。我将研究居中的多种方法，不过我认为我们仍将需要更好的东西。</p>
<h3 id="&lt;center&gt;">&lt;center&gt;</h3><p>首先，如果你还在使用<code>&lt;center&gt;</code>标签来居中，那么1999年喊你回家吃饭。正经地说，你把你的“现代web开发者”会员卡交出来吧。直到你改掉你如此丑陋的代码为止。</p>
<p><em>译者注：谷歌首页的logo就使用了<code>&lt;center&gt;</code>标签😰</em></p>
<h3 id="text-align:center">text-align:center</h3><p>每当说到居中文本的时候，你显然无法放弃<code>text-align:center</code>。它的功能正如它的字面意义。它将父容器中的行内文本水平居中。</p>
<p>例：</p>
<pre><code>&lt;style&gt;
#ex1_container { text-align:center; width:200px; background-      
color:yellow; }
&lt;/style&gt;
&lt;div id=&quot;ex1_container&quot;&gt;Hello World&lt;/div&gt;
</code></pre><div id="ex1_container1" style="text-align: center; width: 200px; background-color: yellow;">Hello World</div>

<p>这很容易。这里的技巧在于构造一个我们希望其子元素居中的父元素。我们不直接对内容添加样式，而是它的父容器。</p>
<p>除此之外，这个方法只对行内元素起作用（而且大概只该被使用在文本上，不过这点不被严格限制）。而且它只作用于水平方向。</p>
<h3 id="vertical-align:middle">vertical-align:middle</h3><p> “不过，不过···”你说，“不过<code>vertical-align:middle</code>如何？”对，听起来不错。可是结果，没那么理想。</p>
<p> 不像text-align：center，设置在一个父元素上来形容水平如何居中<em>它的内容</em>，<code>vertical-align:middle</code>作用在内容本身，并且不在它的父元素处描述它的位置，只是描述相对于周围别的行内元素的位置。</p>
<p> 对，只对让行内文本和行内图像整齐地排排坐有用，但这不是我们想要的神一样的垂直居中。</p>
<p><strong>注</strong>：你可以用<code>display:table</code>这个玩意在父元素上，把<code>display:table-cell</code>用在内容元素上。坏处：这就回到表格时代了，而且在低版本IE上兼容性很差。</p>
<h3 id="line-height">line-height</h3><p>一个有用的垂直居中文本的技巧是设置它容器的<code>line-height</code>属性为你想要的高度，然后文本会（大概的）自动垂直居中。这是一个常用的技巧。有时<code>line-height</code>会有一些副作用，并且它并不是十分完美的（由于字体单位不同，等等）。不过，当你所有的全部只是一根火柴棒，每样事物看起来都像是可以生火的木柴，对吧？</p>
<p>So，我们该怎么居中块级元素呢?</p>
<h3 id="margin:auto">margin:auto</h3><p>好吧，理论上说，我们大概会使用<code>margin: .. auto</code>，此次“..”表示我们的垂直margin。（我们一会后再说垂直居中的问题）</p>
<p>那么这是怎么工作的（水平居中）？例子如下：</p>
<pre><code>&lt;style&gt;
#ex2_container { width:200px; background-color:yellow; }
#ex2_content { margin:0px auto; background-color:gray; color:white;       
display:table; }
&lt;/style&gt;

&lt;div id=&quot;ex2_container&quot;&gt;&lt;div id=&quot;ex2_content&quot;&gt;Hello World&lt;/div&gt;
&lt;/div&gt;
</code></pre><div id="ex2_container" style="width: 200px; background-color: yellow;"><div id="ex2_content" style="margin: 0px auto; background-color: gray; color: white; display: table;">Hello World</div></div>

<p><strong>注：</strong>因为在这个例子中我没有确切定义<code>#ex2_content</code>元素的宽度（我只想让它和文本需要的那么大），为了让它收缩在文字周围但依然可以被居中，我使用<code>display:table</code>。你大概以为<code>display:inline-block</code>会有用，但是它不起作用。不过如果你手动设定<code>#ex2_content</code>的<code>width</code>或者<code>max-width</code>，你就完全不需要设定<code>display:table</code>了。</p>
<p>很酷吧?这里，我们只是直接告诉内容我们需要相对父元素居中它本身，当然，是水平的。这相比<br><code>text-align:center</code>来说不够语义化，因为你差不多正在描述内容周围的空间而不是控制内容本身。但我们在这点上会放它一马，因为这还不赖。</p>
<p>所以，你会说“那这肯定适用于垂直居中喽!?”当然不是，你是有多傻多天真才希望会有这样一个对称而简单的方案!?正经地说，你是在火星学的CSS吗!？</p>
<p>不幸的是，出于某些凡人无法理解的原因，这个“小把戏”不适用于垂直居中。</p>
<h3 id="hacks，hacks">hacks，hacks</h3><p><a href="http://blog.themeforest.net/tutorials/vertical-centering-with-css/" target="_blank" rel="external">这里</a>有大量的hacks，比如像负边距那样的奇异的东西，还有<a href="http://css-tricks.com/centering-in-the-unknown/" target="_blank" rel="external">幽灵元素</a><code>::before</code>等等其他的什么鬼。他们中的大多数都很脆弱，除非你的内容是固定宽度。</p>
<p>如果没有其他解决方案了，这将是我们在被压迫时会变成一种充满创造力的物种的证明——我们想办法制造它。</p>
<h3 id="translate(-50%,-50%)">translate(-50%,-50%)</h3><p>对Chris Coyier在<a href="http://css-tricks.com/" target="_blank" rel="external">CSS-TRICKS.com</a>上发表的一个技巧：<a href="http://css-tricks.com/centering-percentage-widthheight-elements/" target="_blank" rel="external">使用position和translate</a>脱帽致敬。</p>
<p>如果你在一些子元素上设定<code>position:absolute</code>，然后在那个子元素上设定<code>left:50%; top:50%</code>，它的左上角会被自动垂直居中和水平居中。呃，我们大概都知道这个。不过这完全没有帮助，除非我们的内容是1x1像素大。</p>
<p>这个技巧的后续，是<code>translate(-50%,-50%)</code>。不同于大多数这类百分比计算，像<code>left</code>和<code>top</code>，是相对于父容器来说，<code>translate(-50%,-50%)</code>中的百分比是相对于这个元素本身。</p>
<p>所以，我们把容器的左上角定位到中心，并且将它按宽度和长度的一半“转换”回来，然后duang!!，奇迹般得在两个方向都居中了。</p>
<p>例：</p>
<pre><code>&lt;style&gt;
#ex3_container { 
    width:200px;
    height:200px;
    background-color:yellow;
    position:relative; }
 #ex3_content { 
    left:50%; 
    top:50%; 
    transform:translate(-50%,-50%); 
    -webkit-transform:translate(-50%,-50%);
    background-color:gray;
    color:white; position:absolute; }
 &lt;/style&gt;

&lt;div id=&quot;ex3_container&quot;&gt;
    &lt;div id=&quot;ex3_content&quot;&gt;Hello World&lt;/div&gt;
&lt;/div&gt;
</code></pre><style>
  #ex3_container { width:200px; height:200px; background-color:yellow; position:relative; }
  #ex3_content { left:50%; top:50%; transform:translate(-50%,-50%); -webkit-transform:translate(-50%,-50%); background-color:gray; color:white; position:absolute; }
</style>

<div id="ex3_container"><div id="ex3_content">Hello World</div></div>


<p>这个技巧的鲁棒性明显比其他hack更强，因为它优雅地响应了各种情况，像不定宽内容，<code>min-width</code>,<code>max-height</code>,<code>overflow:scroll</code>,etc。它基本上做到了你希望它做的。无论它收缩或者扩展（除非你加了限制），都保持居中。棒棒哒！</p>
<p>去<a href="http://jsbin.com/etupoz/1/" target="_blank" rel="external">把玩</a>一下看看它能做什么。</p>
<p>不过，让我们诚实一些，这个方案不太语义化，而且在语法上比较丑陋（特别是因为那些奇怪的前缀）。并且落到了用力过度的那一类里。</p>
<p>这大概是目前最好的技巧了，考虑到了所有情况。但是让我伤心的是我们依旧需要写这样的文章，玩弄CSS来达到我们需要的效果。</p>
<h3 id="这是我们能做到的最好吗">这是我们能做到的最好吗</h3><p>如果这些“技巧”和“hacks”在你听起来像“垃圾科学”，这很正常。为什么这个该死的问题这么难？为什么我们需要根据不同的场景使用不同的技术？</p>
<p>一种统治一切的居中规则听起来如何？难道不该有一种标准的“东西”被加入CSS去处理一切问题，取代我们现在所处的处处hack的情形？</p>
<p>（阴谋论：制定CSS标准的同志们需要继续给博主们猛料，所以他们故意留了一些没有解决的问题）</p>
<p>这里有一个我刚想出来得平常的提议：</p>
<pre><code>&lt;style&gt;
#ex4_container { content-positioning:50% 50%; width:200px; 
height:200px; background-color:yellow; }
#ex4_content { content-positioning-anchor:50% 50%; 
background-color:gray; color:white; }
&lt;/style&gt;
</code></pre><p>我建议应该有一个<code>content-positioning</code>属性在父元素上来控制其子元素的位置。还有一个<code>content-positioning-anchor</code>属性控制子元素上起始点的位置。它会，当然，默认设为<code>0px 0px</code>，但是如果你把它设定为<code>50% 50%</code>，你会说，仅此而已，“把我的内容的中心放在容器的中心”。</p>
<p>duang！我刚刚解决了全世界的难题。好吧，这不是真的。这种假设令人上瘾。</p>
<h3 id="你怎么看？">你怎么看？</h3><p>让我们讨论一下统一的解决方案会是什么样的。或者可能已经有了我不知道的特别秘密的CSS标准提案。无论哪种情况，让我们免除hack之苦，向这个频繁地使用场景的标准化前进。</p>
<p>你怎么看？告诉我们吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://muxistudio.qiniudn.com/ccs_center_660_380px.jpg" alt="css centering"></p>
<p>自从文明的曙光降临以来，人类一直在斗争,对抗一切不可能之事，来达到人类进化的下一个阶段；去在这个伟大的星球上，以及环绕我们的宇宙中圈出自己的地盘；勇敢的进军任何地点…噢，原谅我这么夸张。</p>]]>
    
    </summary>
    
      <category term="html5 翻译" scheme="http://yoursite.com/tags/html5-%E7%BF%BB%E8%AF%91/"/>
    
      <category term="html5 翻译" scheme="http://yoursite.com/categories/html5-%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记(一)]]></title>
    <link href="http://yoursite.com/2015/05/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_1/"/>
    <id>http://yoursite.com/2015/05/19/读书笔记_1/</id>
    <published>2015-05-19T13:44:14.000Z</published>
    <updated>2015-05-19T15:10:42.000Z</updated>
    <content type="html"><![CDATA[<p>读老道(Douglas Crockford)的《Javascript:The Good Parts》中关于array.splice()方法的实现代码，现在自己加一些注释。  </p>
<a id="more"></a>
<pre class="prettyprint">
    //array.splice() is a method that delete some items in an array, 
    //and add new items to the place where the deleted items used 
    //to be, finally, it returns the deleted items as an array.
    Array.method('splice', function (start, deleteCount) {
    var max = Math.max,
        min = Math.min,
        delta,
        element,
        //arguments here refer to all the arguments this method
        //receive(as an array). So we should drop the first two
        //paramaters(start and deleteCount).
        insertCount = max(arguments.length - 2, 0),
        k = 0,
        len = this.length,
        new_len,
        result = [],
        shift_count;

    //if start is null, start = 0.
    start = start || 0;
    //if start is a negtive number, add start and len to get the 
    //index of the start element.
    if (start < 0) {
        start += len;
    }
    //make sure that start is no bigger than len nor smaller than 0.
    start = max(min(start, len), 0);
    //if deleteCount is not given, delete all the elments after start.
    //And make sure it is is no bigger than len nor smaller than 0.
    deleteCount = max(min(typeof deleteCount === 'number' ?
            deleteCount : len, len − start), 0);
    delta = insertCount − deleteCount;
    new_len = len + delta;
    //push this[start,start + deleteCount -1] into result, namely just 
    //set the deleted array that will be returned.
    while (k < deleteCount) {
        element = this[start + k];
        if (element !== undefined) {
            result[k] = element;
        }
        k += 1;
    }
    //shift_count is the count of remained elements in this[start,] 
    shift_count = len - start - deleteCount;
    //set the new index of the elements left in this[start,].
    if (delta < 0) {
        k = start + insertCount;
        while (shift_count) {
            this[k] = this[k − delta];
            k += 1;
            shift_count −= 1;
        }
        this.length = new_len;
    } else if (delta > 0) {
        k = 1;
        while (shift_count) {
            this[new_len − k] = this[len − k];
            k += 1;
            shift_count −= 1;
        }
    }
    //push the added items in the new index-aranged array.
    for (k = 0; k < insertCount; k += 1) {
        this[start + k] = arguments[k + 2];

    //just return the result,nail it! 
    return result;
    });
   </pre>

]]></content>
    <summary type="html">
    <![CDATA[<p>读老道(Douglas Crockford)的《Javascript:The Good Parts》中关于array.splice()方法的实现代码，现在自己加一些注释。  </p>]]>
    
    </summary>
    
      <category term="Javascript 读书笔记" scheme="http://yoursite.com/tags/Javascript-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Javascript 读书笔记" scheme="http://yoursite.com/categories/Javascript-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css像素与理想viewport宽度]]></title>
    <link href="http://yoursite.com/2015/05/12/css%E5%83%8F%E7%B4%A0%E4%B8%8E%E7%90%86%E6%83%B3viewport%E5%AE%BD%E5%BA%A6/"/>
    <id>http://yoursite.com/2015/05/12/css像素与理想viewport宽度/</id>
    <published>2015-05-12T11:57:37.000Z</published>
    <updated>2015-05-12T13:35:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近在开发移动端网页时遇到了两大问题，一是移动端的触摸事件的实现；二是移动端页面的宽度设置问题。今天先来说一说移动端的页面宽度问题。  </p>
<p>首先要说的是css的像素，一个css像素，一个px，和设备的物理像素不是一回事。<br>拿苹果的iphone来说，iphone3的分辨率是320*480，而retina屏的iphone4是640*960,  但如果在浏览器里输出视窗的宽度，两者都是320px宽。这说明Retina屏的iPhone用4个物理像素来渲染了一个css像素。iPad上的情况是相似的，新老ipad的css分辨率都是1024*768。安卓上的情况也是类似的，比如nexus 5的物理分辨率是1920*1080，而css分辨率是640*360。  关于这个可以参考一下<a href="http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html" target="_blank" rel="external">quirksmode上的博文《此像素非彼像素》</a><br><a id="more"></a><br>接下来是关于viewport的问题，我在阅读了<a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">这篇博文</a>之后对viewport的尺寸问题清楚了不少。<br>其中我们需要加以重点关注的主要是ideal viewport size（下称理想视窗宽度）。</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;
</code></pre><p>以上代码中的width=device-width可以设置视窗宽度为设备宽度，也就是理想的宽度。而上文说到的css分辨率，便是默认情况下viewport按理想宽度来显示时css的像素值。</p>
<p>因此对于移动端的网页，一般设html和body的宽为100%即可，但是由此带来的思考便是移动端网页图片尺寸的设置问题。</p>
<p><img src="http://muxistudio.qiniudn.com/blog-5-12.png" alt="一加手机微信页面"></p>
<p>这个微信页面的图片的宽度是640px，虽然手机的理想视窗宽度是320px左右，但是图片的像素还是应该和物理像素相近，不然就会出现一个物理像素渲染多个图片像素的情况。<br>而640px正是大部分iphone手机的物理像素值。如果图片尺寸按最高的设备物理像素值来设置，便会使图片过大，使网页性能下降，而iPhone的640px便达到了一个平衡，让大部分设备都有一个良好的使用体验。（当然也不排除工程师偷懒，就拿市占50%的iPhone当最佳实践了）</p>
<p>找到同样关于这个主题的<a href="http://colachan.com/post/3435" target="_blank" rel="external">一篇不错的博文</a>我自愧不如···</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在开发移动端网页时遇到了两大问题，一是移动端的触摸事件的实现；二是移动端页面的宽度设置问题。今天先来说一说移动端的页面宽度问题。  </p>
<p>首先要说的是css的像素，一个css像素，一个px，和设备的物理像素不是一回事。<br>拿苹果的iphone来说，iphone3的分辨率是320*480，而retina屏的iphone4是640*960,  但如果在浏览器里输出视窗的宽度，两者都是320px宽。这说明Retina屏的iPhone用4个物理像素来渲染了一个css像素。iPad上的情况是相似的，新老ipad的css分辨率都是1024*768。安卓上的情况也是类似的，比如nexus 5的物理分辨率是1920*1080，而css分辨率是640*360。  关于这个可以参考一下<a href="http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html">quirksmode上的博文《此像素非彼像素》</a><br>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[联创交流行]]></title>
    <link href="http://yoursite.com/2015/03/27/%E8%81%94%E5%88%9B%E4%BA%A4%E6%B5%81%E8%A1%8C/"/>
    <id>http://yoursite.com/2015/03/27/联创交流行/</id>
    <published>2015-03-27T13:29:18.000Z</published>
    <updated>2015-03-27T13:54:20.000Z</updated>
    <content type="html"><![CDATA[<p>今天托房子学姐的福，我们一行8个人去了联创交流。收获如下：<br>1.招新之道。<br>联创的招新可谓是九九八十一难。几轮面试笔试压力测试加上实习期的四轮新手任务。这也是没办法的事情，报名的人多，而且据他们说也都不怎么有基础，那就需要不断的测试来筛选有潜力的。<br>新手任务我认为是可取的一个点。在不断的自我学习中获得成长，也得到了初步的知识与技能，不失为一个启动的好办法。<br>2.待客之道。<br>联创的人给人的印象是热情坦诚，愿意分享，但不失专业。<br><a id="more"></a><br>3.团队之道。<br>如果让大家都相互熟识？如何让这个团队的气氛活跃？这个在我看来是个难题。在接下去的项目合作中大家会相互熟悉，但这样是不够的。<br>比较好的办法除了一些聚会（主动的或者被动的接触）之外，大概还有参加各种社交性的活动，比如组队去参加hackday之类的。<br>写代码不是人生的全部，在饭桌上，今夜我们不关心技术，只关心你。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天托房子学姐的福，我们一行8个人去了联创交流。收获如下：<br>1.招新之道。<br>联创的招新可谓是九九八十一难。几轮面试笔试压力测试加上实习期的四轮新手任务。这也是没办法的事情，报名的人多，而且据他们说也都不怎么有基础，那就需要不断的测试来筛选有潜力的。<br>新手任务我认为是可取的一个点。在不断的自我学习中获得成长，也得到了初步的知识与技能，不失为一个启动的好办法。<br>2.待客之道。<br>联创的人给人的印象是热情坦诚，愿意分享，但不失专业。<br>]]>
    
    </summary>
    
      <category term="木犀日常" scheme="http://yoursite.com/tags/%E6%9C%A8%E7%8A%80%E6%97%A5%E5%B8%B8/"/>
    
      <category term="木犀日常" scheme="http://yoursite.com/categories/%E6%9C%A8%E7%8A%80%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
</feed>