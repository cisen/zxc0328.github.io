<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zindex's blog]]></title>
  <subtitle><![CDATA[zindex of muxistudio]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-28T11:45:38.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Zindex]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Web Animation Using Javascript part one]]></title>
    <link href="http://yoursite.com/2015/05/23/Web-Animation-Using-Javascript-part-one/"/>
    <id>http://yoursite.com/2015/05/23/Web-Animation-Using-Javascript-part-one/</id>
    <published>2015-05-23T14:47:00.000Z</published>
    <updated>2015-05-28T11:45:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="第二章：Velocity-js动画(1)">第二章：Velocity.js动画(1)</h2><p>在这一章，你将学到由Velocity.js提供的特性，指令，和选项。如果你熟悉基于jQuery的动画，那么你已经知道如何使用Velocity.js了；它的功能几乎和jQuery的$.animate()函数一模一样。</p>
<p>不过抛开你现有的知识，本章中对特性的井井有条的分类将会向你介绍动画引擎行为的细微差别。掌握这些细微差别将会帮助你从新手成为专业人士。即使你已经对jQuery动画和Velocity.js相当熟悉了，也给自己一个机会，快速浏览本章。你必定会发现一些你没想到能这么做的事情。</p>
<h3 id="JavaScript动画库类型">JavaScript动画库类型</h3><p>JavaScript动画库有很多类型。有些在浏览器中重现物理接触效果。有些使WebGL和Canvas动画更容易维护。有些专注于SVG动画。有些则改善了UI动画————最后这种类型正是本书的重点。</p>
<p>两种广受欢迎的UI动画库是GSAP和Velocity。你将在本书中使用Velocity，因为它在MIT许可下是免费的，外加它拥有极其强大的功能以供编写整洁且富有表现力的动画代码。它被很多知名站点使用，包括Tumblr，Gap，还有Scribd。</p>
<p>噢，而且它是由本书的作者创造的！</p>
<h3 id="安装jQuery和Velocity">安装jQuery和Velocity</h3><p>你可以在jQuery.com下载jQuery，从VelosityJS.org下载Velosity。在你的页面上使用它们————和任何JavaScript库一样————只要把指向对应库文件的<code>&lt;script&gt; &lt;/script&gt;</code>标签放在你页面的<code>&lt;/body&gt;</code>标签之前。如果你想链接到预部署的库文件（与使用你电脑的本地拷贝相反），你的代码看起来可能是这样：</p>
<pre><code>&lt;html&gt;
      &lt;head&gt;My Page&lt;/head&gt;
   &lt;body&gt;
         My content.
         &lt;script src=”//code.jquery.com/jquery-2.1.1.min.js”&gt;
       &lt;/script&gt;
       &lt;script src=”//cdn.jsdelivr.net/velocity/1.1.0/
       velocity.min.js”&gt;
       &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>这就对了！现在你已经准备好了。</p>
<h2 id="使用Velocity:基础">使用Velocity:基础</h2><p>为了熟悉Velocity，我们将从基本的组件开始：参数，属性，值，和链式调用。因为jQuery几乎无所不在，看看Velocity和jQuery的关系也是有必要的。</p>
<h3 id="Velocity和jQuery">Velocity和jQuery</h3><p>Velocity可以独立于jQuery运行，但是二者可以一起使用。一般我们推荐这么做来获得jQuery的链式调用能力：当你已经使用jQuery预选择了一个元素，你可以调用.velocity()来拓展它从而使它拥有动画效果：</p>
<pre><code>// Assign a variable to a jQuery element object
var $div = $(“div”);
// Animate the element using Velocity
$div.velocity({ opacity: 0 });
This syntax is identical to jQuery’s own animate function:
$div.animate({ opacity: 0 });
</code></pre><p>本书所有的例子都使用Velocity和jQuery的结合，因此可以使用这种语法。</p>
<h3 id="参数">参数</h3><p>Velocity接收多个参数。第一个参数是一个映射了最终想要达到的CSS属性值的对象。属性和接收的值的类型直接和CSS中使用的对应（如果你不熟悉基础的CSS属性，在读这段代码之前找一本介绍性的HTML和CSS书）</p>
<pre><code> // Animate an element to a width of “500px” and to an opacity of 1.
 $element.velocity({ width: “500px”, opacity: 1 });
</code></pre><p> <em>Tip</em><br> 在JavaScript中，如果你正在提供一个包含字母（不只有整数）的属性值，把属性值放在引号中。</p>
<p>你可以传递一个规定了动画选项的对象作为第二个参数。</p>
<pre><code>$element.velocity({ width: “500px”, opacity: 1 }, { duration: 400, 
easing: “swing” });
</code></pre><p>这里也有一个简写的参数语法：你可以使用逗号分隔语法，而不是传递一个包含选项的对象作为第二个参数。这要求以任何逗号分隔的顺序呢列出动画时长的数值（接收一个整数），缓动模式（一个字符串），以及回调函数（一个函数）。（你一会将会学到这些选项的作用）</p>
<pre><code> // 1000ms时长的动画 (使用默认缓动模式swing)
  $element.velocity({ top: 50 }, 1000);
  //1000ms时长的动画，并且使用缓动模式“ease-in-out”
  $element.velocity({ top: 50 }, 1000, “ease-in-out”);
 //使用缓动模式“ease-out”，使用默认时长值400ms)
 $element.velocity({ top: 50 }, “ease-out”);
 // 1000ms时长的动画,并且在动画完成时触发一个回调函数        
 $element.velocity({ top: 50 }, 1000, function() 
 { alert(“Complete.”) });
</code></pre><p>当你只需要规定基本选项(时长，缓动模式，回调函数)的时候，这个简写语法是一种传递动画选项的快捷方法。如果你在这三个选项之外传递一个动画选项，你必须把所有选项调回对象语法。</p>
<pre><code>$element.velocity({ top: 50 }, 1000, “ease-in-out”);
</code></pre><p>到这种语法</p>
<pre><code>// Re-specify the animation options used above, but include a delay 
value of 500ms
$element.velocity({ top: 50 }, { duration: 1000, easing: “ease-in-
out”, delay: 500 });
</code></pre><p>你不能这么做：</p>
<pre><code>// Incorrect: Divides animation options between the comma-separated 
syntax and the object syntax
$element.velocity({ top: 50 }, 1000, { easing: “ease-in-out”, 
delay: 500 });
</code></pre><h3 id="属性">属性</h3><p>基于CSS的属性动画和基于JavaScript的有两处不同。</p>
<p>首先，不像CSS那样，Velocity对于每个CSS属性只接收单个数值。所以，你可以传入：</p>
<pre><code>$element.velocity({ padding: 10 });
</code></pre><p>或者：</p>
<pre><code>$element.velocity({ paddingLeft: 10, paddingRight: 10 });
</code></pre><p>但是你不能传递:</p>
<pre><code>// Incorrect: The CSS property is being passed more than one numeric 
value.
$element.velocity({ padding: “10 10 10 10” });
</code></pre><p>如果你想要把四个padding值(top, right, bottom, and left)加入动画，将它们列为分离的属性。</p>
<pre><code>// Correct
$element.velocity({
  paddingTop: 10,
  paddingRight: 10,
  paddingBottom: 10,
  paddingLeft: 10
});
</code></pre><p>其他可以接收多个数值的CSS属性包括marin，transform， text-shadow，还有box-shadow。</p>
<p>为了动画将组合属性分离到它们的子属性给了你对缓动值的进一步的控制。在CSS中，举个例子，当对父padding属性下的多个子属性进行动画时，你只可以规定一种属性范围的缓动类型。在JavaScript中，你可以为每个子属性规定独立的缓动值——这个特性的优势会在之后这章关于CSS transform属性的讨论中变得明确。</p>
<p>列出我们的独立子属性也可以使你的动画代码更易阅读和维护。</p>
<p>基于CSS的属性动画和基于JavaScript的属性动画的第二处不同是JavaScript属性没有词之间的横杠，所有第一个词之后的词必须大写。例如，padding-left变成了paddingLeft，而background-color变成了backgroundColor。还有一点，JavaScript属性名不应该加引号：</p>
<pre><code>// Correct
$element.velocity({ paddingLeft: 10 });
// Incorrect: Uses a dash and doesn’t capitalize
$element.velocity({ padding-left: 10 });
// Incorrect: Uses quotes around the JavaScript-formatted property 
name 
$element.velocity({ “paddingLeft”: 10 });
</code></pre><h3 id="值">值</h3><p>Velocity支持px,em,rem,%,deg,vw和vh单位。如果你没有为数值提供一个单位，一个基于CSS属性类型的合适的单位会被自动添加。对于大多数属性，px是默认单位，不过一个需要旋转角度的属性，比如rotateZ,会被自动添加deg单位：</p>
<pre><code>$element.velocity({
  top: 50, // Defaults to the px unit type
  left: “50%”, // We manually specify the % unit type
  rotateZ: 25 // Defaults to the deg unit type
});
</code></pre><p>为你所有的属性值显式声明单位类型，通过使px单位和它的替代选择之间的对比更加明显来增加代码在快速浏览时的清晰程度。</p>
<p>另一个Velocity相对于CSS的优势是它支持可以被选择性添加在属性值之前的四种数值操作符：+，—，*，和/。它们和JavaScript中的数学操作符一一对应。你可以把这些数值操作符与一个等号组合来进行相应的数学运算。请参考例子的行内代码注释：</p>
<pre><code>$element.velocity({
  top: “50px”, // No operator. Animate toward 50 as expected.
  left: “-50”, // Negative operator. Animate toward -50 as expected.
  width: “+=5rem”, // Convert the current width value into its 
  rem equivalent and add 5 more units.
  height: “-10rem”, // Convert the current height value into its 
  rem equivalent and subtract 10 units.
  paddingLeft: “*=2” // Double the current paddingLeft value.
  paddingRight: “/=2” // Divide the current paddingLeft value into 
  two.
});
</code></pre><p>Velocity的简写特性，像数值操作符，把动画逻辑保留在动画引擎中。这不仅仅因排除手动数值计算而使代码更简洁，也通过告诉Velocity更多你计划如何使元素发生动画来提升了性能。Velocity处理的逻辑越多，它优化你的代码来达到更高的帧数的能力就越强。</p>
<h3 id="链式调用">链式调用</h3><p>当多个Velocity调用被连续链接在一个元素（或一系列元素）上的时候，它们会自动形成队列。这说明每个动画在前一个动画完成时开始：</p>
<pre><code>$element
  // Animate the width and height properties
  .velocity({ width: “100px”, height: “100px” })
  // When width and height are done animating, animate the top
   property
  .velocity({ top: “50px” });
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="第二章：Velocity-js动画(1)">第二章：Velocity.js动画(1)</h2><p>在这一章，你将学到由Velocity.js提供的特性，指令，和选项。如果你熟悉基于jQuery的动画，那么你已经知道如何使用Velocity.js了；它的功能几乎和]]>
    </summary>
    
      <category term="翻译,Javascript" scheme="http://yoursite.com/tags/%E7%BF%BB%E8%AF%91-Javascript/"/>
    
      <category term="翻译,Javascript" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91-Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[居中一切(centering all the directions)by KYLE SIMPSON]]></title>
    <link href="http://yoursite.com/2015/05/21/centering-all-the-directions/"/>
    <id>http://yoursite.com/2015/05/21/centering-all-the-directions/</id>
    <published>2015-05-21T14:53:26.000Z</published>
    <updated>2015-05-23T14:45:52.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://muxistudio.qiniudn.com/ccs_center_660_380px.jpg" alt="css centering"></p>
<p>自从文明的曙光降临以来，人类一直在斗争,对抗一切不可能之事，来达到人类进化的下一个阶段；去在这个伟大的星球上，以及环绕我们的宇宙中圈出自己的地盘；勇敢的进军任何地点…噢，原谅我这么夸张。</p>
<a id="more"></a>
<p><img src="http://muxistudio.qiniudn.com/e594bf4bef370534e5b4470b8fd2c4d5.png" alt="twitter"></p>
<p>我想说，“如果你曾与用css居中内容(尤其是垂直居中)苦战，请举手。”其实说“如果你从没有挣扎过…请举手。”可能更快些。CSS是一种强大到让人震惊的工具，但是还是有一些事情，比如垂直居中，甚至在今天仍处于“太TM难了”的状态。我将研究居中的多种方法，不过我认为我们仍将需要更好的东西。</p>
<h3 id="&lt;center&gt;">&lt;center&gt;</h3><p>首先，如果你还在使用<code>&lt;center&gt;</code>标签来居中，那么1999年喊你回家吃饭。正经地说，你把你的“现代web开发者”会员卡交出来吧。直到你改掉你如此丑陋的代码为止。</p>
<p><em>译者注：谷歌首页的logo就使用了<code>&lt;center&gt;</code>标签😰</em></p>
<h3 id="text-align:center">text-align:center</h3><p>每当说到居中文本的时候，你显然无法放弃<code>text-align:center</code>。它的功能正如它的字面意义。它将父容器中的行内文本水平居中。</p>
<p>例：</p>
<pre><code>&lt;style&gt;
#ex1_container { text-align:center; width:200px; background-      
color:yellow; }
&lt;/style&gt;
&lt;div id=&quot;ex1_container&quot;&gt;Hello World&lt;/div&gt;
</code></pre><div id="ex1_container1" style="text-align: center; width: 200px; background-color: yellow;">Hello World</div>

<p>这很容易。这里的技巧在于构造一个我们希望其子元素居中的父元素。我们不直接对内容添加样式，而是它的父容器。</p>
<p>除此之外，这个方法只对行内元素起作用（而且大概只该被使用在文本上，不过这点不被严格限制）。而且它只作用于水平方向。</p>
<h3 id="vertical-align:middle">vertical-align:middle</h3><p> “不过，不过···”你说，“不过<code>vertical-align:middle</code>如何？”对，听起来不错。可是结果，没那么理想。</p>
<p> 不像text-align：center，设置在一个父元素上来形容水平如何居中<em>它的内容</em>，<code>vertical-align:middle</code>作用在内容本身，并且不在它的父元素处描述它的位置，只是描述相对于周围别的行内元素的位置。</p>
<p> 对，只对让行内文本和行内图像整齐地排排坐有用，但这不是我们想要的神一样的垂直居中。</p>
<p><strong>注</strong>：你可以用<code>display:table</code>这个玩意在父元素上，把<code>display:table-cell</code>用在内容元素上。坏处：这就回到表格时代了，而且在低版本IE上兼容性很差。</p>
<h3 id="line-height">line-height</h3><p>一个有用的垂直居中文本的技巧是设置它容器的<code>line-height</code>属性为你想要的高度，然后文本会（大概的）自动垂直居中。这是一个常用的技巧。有时<code>line-height</code>会有一些副作用，并且它并不是十分完美的（由于字体单位不同，等等）。不过，当你所有的全部只是一根火柴棒，每样事物看起来都像是可以生火的木柴，对吧？</p>
<p>So，我们该怎么居中块级元素呢?</p>
<h3 id="margin:auto">margin:auto</h3><p>好吧，理论上说，我们大概会使用<code>margin: .. auto</code>，此次“..”表示我们的垂直margin。（我们一会后再说垂直居中的问题）</p>
<p>那么这是怎么工作的（水平居中）？例子如下：</p>
<pre><code>&lt;style&gt;
#ex2_container { width:200px; background-color:yellow; }
#ex2_content { margin:0px auto; background-color:gray; color:white;       
display:table; }
&lt;/style&gt;

&lt;div id=&quot;ex2_container&quot;&gt;&lt;div id=&quot;ex2_content&quot;&gt;Hello World&lt;/div&gt;
&lt;/div&gt;
</code></pre><div id="ex2_container" style="width: 200px; background-color: yellow;"><div id="ex2_content" style="margin: 0px auto; background-color: gray; color: white; display: table;">Hello World</div></div>

<p><strong>注：</strong>因为在这个例子中我没有确切定义<code>#ex2_content</code>元素的宽度（我只想让它和文本需要的那么大），为了让它收缩在文字周围但依然可以被居中，我使用<code>display:table</code>。你大概以为<code>display:inline-block</code>会有用，但是它不起作用。不过如果你手动设定<code>#ex2_content</code>的<code>width</code>或者<code>max-width</code>，你就完全不需要设定<code>display:table</code>了。</p>
<p>很酷吧?这里，我们只是直接告诉内容我们需要相对父元素居中它本身，当然，是水平的。这相比<br><code>text-align:center</code>来说不够语义化，因为你差不多正在描述内容周围的空间而不是控制内容本身。但我们在这点上会放它一马，因为这还不赖。</p>
<p>所以，你会说“那这肯定适用于垂直居中喽!?”当然不是，你是有多傻多天真才希望会有这样一个对称而简单的方案!?正经地说，你是在火星学的CSS吗!？</p>
<p>不幸的是，出于某些凡人无法理解的原因，这个“小把戏”不适用于垂直居中。</p>
<h3 id="hacks，hacks">hacks，hacks</h3><p><a href="http://blog.themeforest.net/tutorials/vertical-centering-with-css/" target="_blank" rel="external">这里</a>有大量的hacks，比如像负边距那样的奇异的东西，还有<a href="http://css-tricks.com/centering-in-the-unknown/" target="_blank" rel="external">幽灵元素</a><code>::before</code>等等其他的什么鬼。他们中的大多数都很脆弱，除非你的内容是固定宽度。</p>
<p>如果没有其他解决方案了，这将是我们在被压迫时会变成一种充满创造力的物种的证明——我们想办法制造它。</p>
<h3 id="translate(-50%,-50%)">translate(-50%,-50%)</h3><p>对Chris Coyier在<a href="http://css-tricks.com/" target="_blank" rel="external">CSS-TRICKS.com</a>上发表的一个技巧：<a href="http://css-tricks.com/centering-percentage-widthheight-elements/" target="_blank" rel="external">使用position和translate</a>脱帽致敬。</p>
<p>如果你在一些子元素上设定<code>position:absolute</code>，然后在那个子元素上设定<code>left:50%; top:50%</code>，它的左上角会被自动垂直居中和水平居中。呃，我们大概都知道这个。不过这完全没有帮助，除非我们的内容是1x1像素大。</p>
<p>这个技巧的后续，是<code>translate(-50%,-50%)</code>。不同于大多数这类百分比计算，像<code>left</code>和<code>top</code>，是相对于父容器来说，<code>translate(-50%,-50%)</code>中的百分比是相对于这个元素本身。</p>
<p>所以，我们把容器的左上角定位到中心，并且将它按宽度和长度的一半“转换”回来，然后duang!!，奇迹般得在两个方向都居中了。</p>
<p>例：</p>
<pre><code>&lt;style&gt;
#ex3_container { 
    width:200px;
    height:200px;
    background-color:yellow;
    position:relative; }
 #ex3_content { 
    left:50%; 
    top:50%; 
    transform:translate(-50%,-50%); 
    -webkit-transform:translate(-50%,-50%);
    background-color:gray;
    color:white; position:absolute; }
 &lt;/style&gt;

&lt;div id=&quot;ex3_container&quot;&gt;
    &lt;div id=&quot;ex3_content&quot;&gt;Hello World&lt;/div&gt;
&lt;/div&gt;
</code></pre><style>
  #ex3_container { width:200px; height:200px; background-color:yellow; position:relative; }
  #ex3_content { left:50%; top:50%; transform:translate(-50%,-50%); -webkit-transform:translate(-50%,-50%); background-color:gray; color:white; position:absolute; }
</style>

<div id="ex3_container"><div id="ex3_content">Hello World</div></div>


<p>这个技巧的鲁棒性明显比其他hack更强，因为它优雅地响应了各种情况，像不定宽内容，<code>min-width</code>,<code>max-height</code>,<code>overflow:scroll</code>,etc。它基本上做到了你希望它做的。无论它收缩或者扩展（除非你加了限制），都保持居中。棒棒哒！</p>
<p>去<a href="http://jsbin.com/etupoz/1/" target="_blank" rel="external">把玩</a>一下看看它能做什么。</p>
<p>不过，让我们诚实一些，这个方案不太语义化，而且在语法上比较丑陋（特别是因为那些奇怪的前缀）。并且落到了用力过度的那一类里。</p>
<p>这大概是目前最好的技巧了，考虑到了所有情况。但是让我伤心的是我们依旧需要写这样的文章，玩弄CSS来达到我们需要的效果。</p>
<h3 id="这是我们能做到的最好吗">这是我们能做到的最好吗</h3><p>如果这些“技巧”和“hacks”在你听起来像“垃圾科学”，这很正常。为什么这个该死的问题这么难？为什么我们需要根据不同的场景使用不同的技术？</p>
<p>一种统治一切的居中规则听起来如何？难道不该有一种标准的“东西”被加入CSS去处理一切问题，取代我们现在所处的处处hack的情形？</p>
<p>（阴谋论：制定CSS标准的同志们需要继续给博主们猛料，所以他们故意留了一些没有解决的问题）</p>
<p>这里有一个我刚想出来得平常的提议：</p>
<pre><code>&lt;style&gt;
#ex4_container { content-positioning:50% 50%; width:200px; 
height:200px; background-color:yellow; }
#ex4_content { content-positioning-anchor:50% 50%; 
background-color:gray; color:white; }
&lt;/style&gt;
</code></pre><p>我建议应该有一个<code>content-positioning</code>属性在父元素上来控制其子元素的位置。还有一个<code>content-positioning-anchor</code>属性控制子元素上起始点的位置。它会，当然，默认设为<code>0px 0px</code>，但是如果你把它设定为<code>50% 50%</code>，你会说，仅此而已，“把我的内容的中心放在容器的中心”。</p>
<p>duang！我刚刚解决了全世界的难题。好吧，这不是真的。这种假设令人上瘾。</p>
<h3 id="你怎么看？">你怎么看？</h3><p>让我们讨论一下统一的解决方案会是什么样的。或者可能已经有了我不知道的特别秘密的CSS标准提案。无论哪种情况，让我们免除hack之苦，向这个频繁地使用场景的标准化前进。</p>
<p>你怎么看？告诉我们吧！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://muxistudio.qiniudn.com/ccs_center_660_380px.jpg" alt="css centering"></p>
<p>自从文明的曙光降临以来，人类一直在斗争,对抗一切不可能之事，来达到人类进化的下一个阶段；去在这个伟大的星球上，以及环绕我们的宇宙中圈出自己的地盘；勇敢的进军任何地点…噢，原谅我这么夸张。</p>]]>
    
    </summary>
    
      <category term="html5 翻译" scheme="http://yoursite.com/tags/html5-%E7%BF%BB%E8%AF%91/"/>
    
      <category term="html5 翻译" scheme="http://yoursite.com/categories/html5-%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[读书笔记(一)]]></title>
    <link href="http://yoursite.com/2015/05/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_1/"/>
    <id>http://yoursite.com/2015/05/19/读书笔记_1/</id>
    <published>2015-05-19T13:44:14.000Z</published>
    <updated>2015-05-19T15:10:42.000Z</updated>
    <content type="html"><![CDATA[<p>读老道(Douglas Crockford)的《Javascript:The Good Parts》中关于array.splice()方法的实现代码，现在自己加一些注释。  </p>
<a id="more"></a>
<pre class="prettyprint">
    //array.splice() is a method that delete some items in an array, 
    //and add new items to the place where the deleted items used 
    //to be, finally, it returns the deleted items as an array.
    Array.method('splice', function (start, deleteCount) {
    var max = Math.max,
        min = Math.min,
        delta,
        element,
        //arguments here refer to all the arguments this method
        //receive(as an array). So we should drop the first two
        //paramaters(start and deleteCount).
        insertCount = max(arguments.length - 2, 0),
        k = 0,
        len = this.length,
        new_len,
        result = [],
        shift_count;

    //if start is null, start = 0.
    start = start || 0;
    //if start is a negtive number, add start and len to get the 
    //index of the start element.
    if (start < 0) {
        start += len;
    }
    //make sure that start is no bigger than len nor smaller than 0.
    start = max(min(start, len), 0);
    //if deleteCount is not given, delete all the elments after start.
    //And make sure it is is no bigger than len nor smaller than 0.
    deleteCount = max(min(typeof deleteCount === 'number' ?
            deleteCount : len, len − start), 0);
    delta = insertCount − deleteCount;
    new_len = len + delta;
    //push this[start,start + deleteCount -1] into result, namely just 
    //set the deleted array that will be returned.
    while (k < deleteCount) {
        element = this[start + k];
        if (element !== undefined) {
            result[k] = element;
        }
        k += 1;
    }
    //shift_count is the count of remained elements in this[start,] 
    shift_count = len - start - deleteCount;
    //set the new index of the elements left in this[start,].
    if (delta < 0) {
        k = start + insertCount;
        while (shift_count) {
            this[k] = this[k − delta];
            k += 1;
            shift_count −= 1;
        }
        this.length = new_len;
    } else if (delta > 0) {
        k = 1;
        while (shift_count) {
            this[new_len − k] = this[len − k];
            k += 1;
            shift_count −= 1;
        }
    }
    //push the added items in the new index-aranged array.
    for (k = 0; k < insertCount; k += 1) {
        this[start + k] = arguments[k + 2];

    //just return the result,nail it! 
    return result;
    });
   </pre>

]]></content>
    <summary type="html">
    <![CDATA[<p>读老道(Douglas Crockford)的《Javascript:The Good Parts》中关于array.splice()方法的实现代码，现在自己加一些注释。  </p>]]>
    
    </summary>
    
      <category term="Javascript 读书笔记" scheme="http://yoursite.com/tags/Javascript-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Javascript 读书笔记" scheme="http://yoursite.com/categories/Javascript-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css像素与理想viewport宽度]]></title>
    <link href="http://yoursite.com/2015/05/12/css%E5%83%8F%E7%B4%A0%E4%B8%8E%E7%90%86%E6%83%B3viewport%E5%AE%BD%E5%BA%A6/"/>
    <id>http://yoursite.com/2015/05/12/css像素与理想viewport宽度/</id>
    <published>2015-05-12T11:57:37.000Z</published>
    <updated>2015-05-12T13:35:24.000Z</updated>
    <content type="html"><![CDATA[<p>最近在开发移动端网页时遇到了两大问题，一是移动端的触摸事件的实现；二是移动端页面的宽度设置问题。今天先来说一说移动端的页面宽度问题。  </p>
<p>首先要说的是css的像素，一个css像素，一个px，和设备的物理像素不是一回事。<br>拿苹果的iphone来说，iphone3的分辨率是320*480，而retina屏的iphone4是640*960,  但如果在浏览器里输出视窗的宽度，两者都是320px宽。这说明Retina屏的iPhone用4个物理像素来渲染了一个css像素。iPad上的情况是相似的，新老ipad的css分辨率都是1024*768。安卓上的情况也是类似的，比如nexus 5的物理分辨率是1920*1080，而css分辨率是640*360。  关于这个可以参考一下<a href="http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html" target="_blank" rel="external">quirksmode上的博文《此像素非彼像素》</a><br><a id="more"></a><br>接下来是关于viewport的问题，我在阅读了<a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">这篇博文</a>之后对viewport的尺寸问题清楚了不少。<br>其中我们需要加以重点关注的主要是ideal viewport size（下称理想视窗宽度）。</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;
</code></pre><p>以上代码中的width=device-width可以设置视窗宽度为设备宽度，也就是理想的宽度。而上文说到的css分辨率，便是默认情况下viewport按理想宽度来显示时css的像素值。</p>
<p>因此对于移动端的网页，一般设html和body的宽为100%即可，但是由此带来的思考便是移动端网页图片尺寸的设置问题。</p>
<p><img src="http://muxistudio.qiniudn.com/blog-5-12.png" alt="一加手机微信页面"></p>
<p>这个微信页面的图片的宽度是640px，虽然手机的理想视窗宽度是320px左右，但是图片的像素还是应该和物理像素相近，不然就会出现一个物理像素渲染多个图片像素的情况。<br>而640px正是大部分iphone手机的物理像素值。如果图片尺寸按最高的设备物理像素值来设置，便会使图片过大，使网页性能下降，而iPhone的640px便达到了一个平衡，让大部分设备都有一个良好的使用体验。（当然也不排除工程师偷懒，就拿市占50%的iPhone当最佳实践了）</p>
<p>找到同样关于这个主题的<a href="http://colachan.com/post/3435" target="_blank" rel="external">一篇不错的博文</a>我自愧不如···</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在开发移动端网页时遇到了两大问题，一是移动端的触摸事件的实现；二是移动端页面的宽度设置问题。今天先来说一说移动端的页面宽度问题。  </p>
<p>首先要说的是css的像素，一个css像素，一个px，和设备的物理像素不是一回事。<br>拿苹果的iphone来说，iphone3的分辨率是320*480，而retina屏的iphone4是640*960,  但如果在浏览器里输出视窗的宽度，两者都是320px宽。这说明Retina屏的iPhone用4个物理像素来渲染了一个css像素。iPad上的情况是相似的，新老ipad的css分辨率都是1024*768。安卓上的情况也是类似的，比如nexus 5的物理分辨率是1920*1080，而css分辨率是640*360。  关于这个可以参考一下<a href="http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html">quirksmode上的博文《此像素非彼像素》</a><br>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[联创交流行]]></title>
    <link href="http://yoursite.com/2015/03/27/%E8%81%94%E5%88%9B%E4%BA%A4%E6%B5%81%E8%A1%8C/"/>
    <id>http://yoursite.com/2015/03/27/联创交流行/</id>
    <published>2015-03-27T13:29:18.000Z</published>
    <updated>2015-03-27T13:54:20.000Z</updated>
    <content type="html"><![CDATA[<p>今天托房子学姐的福，我们一行8个人去了联创交流。收获如下：<br>1.招新之道。<br>联创的招新可谓是九九八十一难。几轮面试笔试压力测试加上实习期的四轮新手任务。这也是没办法的事情，报名的人多，而且据他们说也都不怎么有基础，那就需要不断的测试来筛选有潜力的。<br>新手任务我认为是可取的一个点。在不断的自我学习中获得成长，也得到了初步的知识与技能，不失为一个启动的好办法。<br>2.待客之道。<br>联创的人给人的印象是热情坦诚，愿意分享，但不失专业。<br><a id="more"></a><br>3.团队之道。<br>如果让大家都相互熟识？如何让这个团队的气氛活跃？这个在我看来是个难题。在接下去的项目合作中大家会相互熟悉，但这样是不够的。<br>比较好的办法除了一些聚会（主动的或者被动的接触）之外，大概还有参加各种社交性的活动，比如组队去参加hackday之类的。<br>写代码不是人生的全部，在饭桌上，今夜我们不关心技术，只关心你。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天托房子学姐的福，我们一行8个人去了联创交流。收获如下：<br>1.招新之道。<br>联创的招新可谓是九九八十一难。几轮面试笔试压力测试加上实习期的四轮新手任务。这也是没办法的事情，报名的人多，而且据他们说也都不怎么有基础，那就需要不断的测试来筛选有潜力的。<br>新手任务我认为是可取的一个点。在不断的自我学习中获得成长，也得到了初步的知识与技能，不失为一个启动的好办法。<br>2.待客之道。<br>联创的人给人的印象是热情坦诚，愿意分享，但不失专业。<br>]]>
    
    </summary>
    
      <category term="木犀日常" scheme="http://yoursite.com/tags/%E6%9C%A8%E7%8A%80%E6%97%A5%E5%B8%B8/"/>
    
      <category term="木犀日常" scheme="http://yoursite.com/categories/%E6%9C%A8%E7%8A%80%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[统计vs规则]]></title>
    <link href="http://yoursite.com/2015/03/13/%E7%BB%9F%E8%AE%A1vs%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2015/03/13/统计vs规则/</id>
    <published>2015-03-13T04:57:37.000Z</published>
    <updated>2015-03-13T06:24:22.000Z</updated>
    <content type="html"><![CDATA[<p>作为一个在语言学专业读书，又想做NLP的学生，我最担心的，也是最关心的一个问题自然是统计与规则之争。<br>这个问题当然不是一个老问题，近几年来似乎也有了答案————做NLP的清一色的都是计算机出身。<br>但我还是抱着一线希望。谷歌的机器翻译只用统计的方法，根据我的使用经验来看结果其实不太理想，大意能表达，可是语法全是错的。我自然是支持语言学的成果————形式化的规则是在NLP中有一席之地的。<br><a id="more"></a><br>最近看吴军的《数学之美》，却大受打击。吴军在这本书里认为90年代之前的按规则来做的NLP全是无用功，这点我无法反驳。不过他的论调大意就是，NLP走了很久的弯路，之前的按规则来（试图让计算机模拟人类的大脑）是完全不可取的，而统计方法（数学方法）才是正道。他认为语言的本质就是信息的交流、编码与解码。最后他说现在的NLP只需要统计学知识，我看得很无奈，但也无法反驳。<br>我对于NLP的信心，除了来自自己会接受计算机科班教育，主要来自于汉语言界的一些声音。陆俭明老师的《研究教程》里说，汉语语法的研究的目的就是要应用到中文信息处理中去。中文信息处理现在也有一些规则加统计合作的例子。</p>
<p>做计算语言学的，就是应该精通两边的知识，这个道理毫无疑问是正确的。冯志伟老师、詹卫东老师、以及北大应用语言学系的培养方案，都向我传递出这种信号。<br>求学路上难免有迷茫之时，因为我选了一条不同寻常的路。未来肯定还会有无数的摇摆，加油罢。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为一个在语言学专业读书，又想做NLP的学生，我最担心的，也是最关心的一个问题自然是统计与规则之争。<br>这个问题当然不是一个老问题，近几年来似乎也有了答案————做NLP的清一色的都是计算机出身。<br>但我还是抱着一线希望。谷歌的机器翻译只用统计的方法，根据我的使用经验来看结果其实不太理想，大意能表达，可是语法全是错的。我自然是支持语言学的成果————形式化的规则是在NLP中有一席之地的。<br>]]>
    
    </summary>
    
      <category term="NLP" scheme="http://yoursite.com/tags/NLP/"/>
    
      <category term="NLP" scheme="http://yoursite.com/categories/NLP/"/>
    
  </entry>
  
</feed>